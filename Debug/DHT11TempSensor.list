
DHT11TempSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b08  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08002bc8  08002bc8  00012bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c68  08002c68  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002c68  08002c68  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c68  08002c68  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c68  08002c68  00012c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c6c  08002c6c  00012c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000070  08002ce0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08002ce0  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000baae  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016fd  00000000  00000000  0002bb46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0002d248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002dbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010ce7  00000000  00000000  0002e500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4ea  00000000  00000000  0003f1e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068e07  00000000  00000000  0004a6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b34d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002604  00000000  00000000  000b352c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002bb0 	.word	0x08002bb0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002bb0 	.word	0x08002bb0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fbe9 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f849 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f8e5 	bl	8000410 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000246:	f000 f8b3 	bl	80003b0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800024a:	f000 f88f 	bl	800036c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 800024e:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <main+0x84>)
 8000250:	0018      	movs	r0, r3
 8000252:	f001 fb85 	bl	8001960 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if(dht11_read(dht11_val) == 1)
 8000256:	4b19      	ldr	r3, [pc, #100]	; (80002bc <main+0x88>)
 8000258:	0018      	movs	r0, r3
 800025a:	f000 f9af 	bl	80005bc <dht11_read>
 800025e:	0003      	movs	r3, r0
 8000260:	2b01      	cmp	r3, #1
 8000262:	d113      	bne.n	800028c <main+0x58>
	{

	  uint16_t len = sprintf(send_data, "Humidity: %d  Temperature: %d\n\r", dht11_val[1], dht11_val[0]);
 8000264:	4b15      	ldr	r3, [pc, #84]	; (80002bc <main+0x88>)
 8000266:	785b      	ldrb	r3, [r3, #1]
 8000268:	001a      	movs	r2, r3
 800026a:	4b14      	ldr	r3, [pc, #80]	; (80002bc <main+0x88>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	4914      	ldr	r1, [pc, #80]	; (80002c0 <main+0x8c>)
 8000270:	4814      	ldr	r0, [pc, #80]	; (80002c4 <main+0x90>)
 8000272:	f002 f877 	bl	8002364 <siprintf>
 8000276:	0002      	movs	r2, r0
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	801a      	strh	r2, [r3, #0]

	  HAL_UART_Transmit(&huart2, (uint8_t*)send_data, len, 100);
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	881a      	ldrh	r2, [r3, #0]
 8000280:	4910      	ldr	r1, [pc, #64]	; (80002c4 <main+0x90>)
 8000282:	4811      	ldr	r0, [pc, #68]	; (80002c8 <main+0x94>)
 8000284:	2364      	movs	r3, #100	; 0x64
 8000286:	f001 fc79 	bl	8001b7c <HAL_UART_Transmit>
 800028a:	e00f      	b.n	80002ac <main+0x78>

	}
	else{
	  uint16_t len = sprintf(send_data, "DHT11 Read Error!\n\r");
 800028c:	4a0f      	ldr	r2, [pc, #60]	; (80002cc <main+0x98>)
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <main+0x90>)
 8000290:	0011      	movs	r1, r2
 8000292:	0018      	movs	r0, r3
 8000294:	f002 f866 	bl	8002364 <siprintf>
 8000298:	0002      	movs	r2, r0
 800029a:	1dbb      	adds	r3, r7, #6
 800029c:	801a      	strh	r2, [r3, #0]

	  HAL_UART_Transmit(&huart2, (uint8_t*)send_data, len, 100);
 800029e:	1dbb      	adds	r3, r7, #6
 80002a0:	881a      	ldrh	r2, [r3, #0]
 80002a2:	4908      	ldr	r1, [pc, #32]	; (80002c4 <main+0x90>)
 80002a4:	4808      	ldr	r0, [pc, #32]	; (80002c8 <main+0x94>)
 80002a6:	2364      	movs	r3, #100	; 0x64
 80002a8:	f001 fc68 	bl	8001b7c <HAL_UART_Transmit>
	}

	HAL_Delay(3000);
 80002ac:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <main+0x9c>)
 80002ae:	0018      	movs	r0, r3
 80002b0:	f000 fc12 	bl	8000ad8 <HAL_Delay>
	if(dht11_read(dht11_val) == 1)
 80002b4:	e7cf      	b.n	8000256 <main+0x22>
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	20000098 	.word	0x20000098
 80002bc:	200001e4 	.word	0x200001e4
 80002c0:	08002bc8 	.word	0x08002bc8
 80002c4:	200000e0 	.word	0x200000e0
 80002c8:	20000160 	.word	0x20000160
 80002cc:	08002be8 	.word	0x08002be8
 80002d0:	00000bb8 	.word	0x00000bb8

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b590      	push	{r4, r7, lr}
 80002d6:	b091      	sub	sp, #68	; 0x44
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	2410      	movs	r4, #16
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	0018      	movs	r0, r3
 80002e0:	2330      	movs	r3, #48	; 0x30
 80002e2:	001a      	movs	r2, r3
 80002e4:	2100      	movs	r1, #0
 80002e6:	f002 f835 	bl	8002354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ea:	003b      	movs	r3, r7
 80002ec:	0018      	movs	r0, r3
 80002ee:	2310      	movs	r3, #16
 80002f0:	001a      	movs	r2, r3
 80002f2:	2100      	movs	r1, #0
 80002f4:	f002 f82e 	bl	8002354 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f8:	0021      	movs	r1, r4
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2202      	movs	r2, #2
 80002fe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2201      	movs	r2, #1
 8000304:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2210      	movs	r2, #16
 800030a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2202      	movs	r2, #2
 8000310:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2280      	movs	r2, #128	; 0x80
 8000316:	0212      	lsls	r2, r2, #8
 8000318:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2280      	movs	r2, #128	; 0x80
 800031e:	0352      	lsls	r2, r2, #13
 8000320:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2200      	movs	r2, #0
 8000326:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000328:	187b      	adds	r3, r7, r1
 800032a:	0018      	movs	r0, r3
 800032c:	f000 fe56 	bl	8000fdc <HAL_RCC_OscConfig>
 8000330:	1e03      	subs	r3, r0, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000334:	f000 fa5a 	bl	80007ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000338:	003b      	movs	r3, r7
 800033a:	2207      	movs	r2, #7
 800033c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033e:	003b      	movs	r3, r7
 8000340:	2202      	movs	r2, #2
 8000342:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000344:	003b      	movs	r3, r7
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034a:	003b      	movs	r3, r7
 800034c:	2200      	movs	r2, #0
 800034e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000350:	003b      	movs	r3, r7
 8000352:	2101      	movs	r1, #1
 8000354:	0018      	movs	r0, r3
 8000356:	f001 f95f 	bl	8001618 <HAL_RCC_ClockConfig>
 800035a:	1e03      	subs	r3, r0, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800035e:	f000 fa45 	bl	80007ec <Error_Handler>
  }
}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	46bd      	mov	sp, r7
 8000366:	b011      	add	sp, #68	; 0x44
 8000368:	bd90      	pop	{r4, r7, pc}
	...

0800036c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <MX_TIM6_Init+0x38>)
 8000372:	4a0d      	ldr	r2, [pc, #52]	; (80003a8 <MX_TIM6_Init+0x3c>)
 8000374:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48;
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <MX_TIM6_Init+0x38>)
 8000378:	2230      	movs	r2, #48	; 0x30
 800037a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <MX_TIM6_Init+0x38>)
 800037e:	2200      	movs	r2, #0
 8000380:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <MX_TIM6_Init+0x38>)
 8000384:	4a09      	ldr	r2, [pc, #36]	; (80003ac <MX_TIM6_Init+0x40>)
 8000386:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <MX_TIM6_Init+0x38>)
 800038a:	2200      	movs	r2, #0
 800038c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800038e:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <MX_TIM6_Init+0x38>)
 8000390:	0018      	movs	r0, r3
 8000392:	f001 fa95 	bl	80018c0 <HAL_TIM_Base_Init>
 8000396:	1e03      	subs	r3, r0, #0
 8000398:	d001      	beq.n	800039e <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 800039a:	f000 fa27 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20000098 	.word	0x20000098
 80003a8:	40001000 	.word	0x40001000
 80003ac:	0000ffff 	.word	0x0000ffff

080003b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003b4:	4b14      	ldr	r3, [pc, #80]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003b6:	4a15      	ldr	r2, [pc, #84]	; (800040c <MX_USART2_UART_Init+0x5c>)
 80003b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003ba:	4b13      	ldr	r3, [pc, #76]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003bc:	2296      	movs	r2, #150	; 0x96
 80003be:	0212      	lsls	r2, r2, #8
 80003c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003d6:	220c      	movs	r2, #12
 80003d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003e6:	4b08      	ldr	r3, [pc, #32]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003f2:	4b05      	ldr	r3, [pc, #20]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003f4:	0018      	movs	r0, r3
 80003f6:	f001 fb6d 	bl	8001ad4 <HAL_UART_Init>
 80003fa:	1e03      	subs	r3, r0, #0
 80003fc:	d001      	beq.n	8000402 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003fe:	f000 f9f5 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000160 	.word	0x20000160
 800040c:	40004400 	.word	0x40004400

08000410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b08b      	sub	sp, #44	; 0x2c
 8000414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000416:	2414      	movs	r4, #20
 8000418:	193b      	adds	r3, r7, r4
 800041a:	0018      	movs	r0, r3
 800041c:	2314      	movs	r3, #20
 800041e:	001a      	movs	r2, r3
 8000420:	2100      	movs	r1, #0
 8000422:	f001 ff97 	bl	8002354 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000426:	4b40      	ldr	r3, [pc, #256]	; (8000528 <MX_GPIO_Init+0x118>)
 8000428:	695a      	ldr	r2, [r3, #20]
 800042a:	4b3f      	ldr	r3, [pc, #252]	; (8000528 <MX_GPIO_Init+0x118>)
 800042c:	2180      	movs	r1, #128	; 0x80
 800042e:	0309      	lsls	r1, r1, #12
 8000430:	430a      	orrs	r2, r1
 8000432:	615a      	str	r2, [r3, #20]
 8000434:	4b3c      	ldr	r3, [pc, #240]	; (8000528 <MX_GPIO_Init+0x118>)
 8000436:	695a      	ldr	r2, [r3, #20]
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	031b      	lsls	r3, r3, #12
 800043c:	4013      	ands	r3, r2
 800043e:	613b      	str	r3, [r7, #16]
 8000440:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000442:	4b39      	ldr	r3, [pc, #228]	; (8000528 <MX_GPIO_Init+0x118>)
 8000444:	695a      	ldr	r2, [r3, #20]
 8000446:	4b38      	ldr	r3, [pc, #224]	; (8000528 <MX_GPIO_Init+0x118>)
 8000448:	2180      	movs	r1, #128	; 0x80
 800044a:	03c9      	lsls	r1, r1, #15
 800044c:	430a      	orrs	r2, r1
 800044e:	615a      	str	r2, [r3, #20]
 8000450:	4b35      	ldr	r3, [pc, #212]	; (8000528 <MX_GPIO_Init+0x118>)
 8000452:	695a      	ldr	r2, [r3, #20]
 8000454:	2380      	movs	r3, #128	; 0x80
 8000456:	03db      	lsls	r3, r3, #15
 8000458:	4013      	ands	r3, r2
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045e:	4b32      	ldr	r3, [pc, #200]	; (8000528 <MX_GPIO_Init+0x118>)
 8000460:	695a      	ldr	r2, [r3, #20]
 8000462:	4b31      	ldr	r3, [pc, #196]	; (8000528 <MX_GPIO_Init+0x118>)
 8000464:	2180      	movs	r1, #128	; 0x80
 8000466:	0289      	lsls	r1, r1, #10
 8000468:	430a      	orrs	r2, r1
 800046a:	615a      	str	r2, [r3, #20]
 800046c:	4b2e      	ldr	r3, [pc, #184]	; (8000528 <MX_GPIO_Init+0x118>)
 800046e:	695a      	ldr	r2, [r3, #20]
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	029b      	lsls	r3, r3, #10
 8000474:	4013      	ands	r3, r2
 8000476:	60bb      	str	r3, [r7, #8]
 8000478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047a:	4b2b      	ldr	r3, [pc, #172]	; (8000528 <MX_GPIO_Init+0x118>)
 800047c:	695a      	ldr	r2, [r3, #20]
 800047e:	4b2a      	ldr	r3, [pc, #168]	; (8000528 <MX_GPIO_Init+0x118>)
 8000480:	2180      	movs	r1, #128	; 0x80
 8000482:	02c9      	lsls	r1, r1, #11
 8000484:	430a      	orrs	r2, r1
 8000486:	615a      	str	r2, [r3, #20]
 8000488:	4b27      	ldr	r3, [pc, #156]	; (8000528 <MX_GPIO_Init+0x118>)
 800048a:	695a      	ldr	r2, [r3, #20]
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	02db      	lsls	r3, r3, #11
 8000490:	4013      	ands	r3, r2
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000496:	2390      	movs	r3, #144	; 0x90
 8000498:	05db      	lsls	r3, r3, #23
 800049a:	2200      	movs	r2, #0
 800049c:	2120      	movs	r1, #32
 800049e:	0018      	movs	r0, r3
 80004a0:	f000 fd7f 	bl	8000fa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80004a4:	4b21      	ldr	r3, [pc, #132]	; (800052c <MX_GPIO_Init+0x11c>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	2120      	movs	r1, #32
 80004aa:	0018      	movs	r0, r3
 80004ac:	f000 fd79 	bl	8000fa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2280      	movs	r2, #128	; 0x80
 80004b4:	0192      	lsls	r2, r2, #6
 80004b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	2284      	movs	r2, #132	; 0x84
 80004bc:	0392      	lsls	r2, r2, #14
 80004be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	4a19      	ldr	r2, [pc, #100]	; (8000530 <MX_GPIO_Init+0x120>)
 80004ca:	0019      	movs	r1, r3
 80004cc:	0010      	movs	r0, r2
 80004ce:	f000 fbdb 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	2220      	movs	r2, #32
 80004d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	2201      	movs	r2, #1
 80004dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004ea:	193a      	adds	r2, r7, r4
 80004ec:	2390      	movs	r3, #144	; 0x90
 80004ee:	05db      	lsls	r3, r3, #23
 80004f0:	0011      	movs	r1, r2
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 fbc8 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80004f8:	0021      	movs	r1, r4
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2220      	movs	r2, #32
 80004fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2201      	movs	r2, #1
 8000504:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2203      	movs	r2, #3
 8000510:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8000512:	187b      	adds	r3, r7, r1
 8000514:	4a05      	ldr	r2, [pc, #20]	; (800052c <MX_GPIO_Init+0x11c>)
 8000516:	0019      	movs	r1, r3
 8000518:	0010      	movs	r0, r2
 800051a:	f000 fbb5 	bl	8000c88 <HAL_GPIO_Init>

}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	b00b      	add	sp, #44	; 0x2c
 8000524:	bd90      	pop	{r4, r7, pc}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	40021000 	.word	0x40021000
 800052c:	48000400 	.word	0x48000400
 8000530:	48000800 	.word	0x48000800

08000534 <set_gpio_mode>:
	while(((uint16_t)__HAL_TIM_GET_COUNTER(&htim6)-init_time) < delay_us){
	}
}

void set_gpio_mode(uint8_t s_mode)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b089      	sub	sp, #36	; 0x24
 8000538:	af00      	add	r7, sp, #0
 800053a:	0002      	movs	r2, r0
 800053c:	1dfb      	adds	r3, r7, #7
 800053e:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000540:	240c      	movs	r4, #12
 8000542:	193b      	adds	r3, r7, r4
 8000544:	0018      	movs	r0, r3
 8000546:	2314      	movs	r3, #20
 8000548:	001a      	movs	r2, r3
 800054a:	2100      	movs	r1, #0
 800054c:	f001 ff02 	bl	8002354 <memset>

	if(s_mode == OUTPUT){
 8000550:	1dfb      	adds	r3, r7, #7
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d113      	bne.n	8000580 <set_gpio_mode+0x4c>
	  GPIO_InitStruct.Pin = DHT11_Pin;
 8000558:	0021      	movs	r1, r4
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2220      	movs	r2, #32
 800055e:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2201      	movs	r2, #1
 8000564:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2203      	movs	r2, #3
 8000570:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000572:	187b      	adds	r3, r7, r1
 8000574:	4a10      	ldr	r2, [pc, #64]	; (80005b8 <set_gpio_mode+0x84>)
 8000576:	0019      	movs	r1, r3
 8000578:	0010      	movs	r0, r2
 800057a:	f000 fb85 	bl	8000c88 <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	}
}
 800057e:	e016      	b.n	80005ae <set_gpio_mode+0x7a>
	else if(s_mode == INPUT){
 8000580:	1dfb      	adds	r3, r7, #7
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d112      	bne.n	80005ae <set_gpio_mode+0x7a>
	  GPIO_InitStruct.Pin = DHT11_Pin;
 8000588:	210c      	movs	r1, #12
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2220      	movs	r2, #32
 800058e:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2203      	movs	r2, #3
 80005a0:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <set_gpio_mode+0x84>)
 80005a6:	0019      	movs	r1, r3
 80005a8:	0010      	movs	r0, r2
 80005aa:	f000 fb6d 	bl	8000c88 <HAL_GPIO_Init>
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b009      	add	sp, #36	; 0x24
 80005b4:	bd90      	pop	{r4, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	48000400 	.word	0x48000400

080005bc <dht11_read>:

uint8_t dht11_read(uint8_t *r_data){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b092      	sub	sp, #72	; 0x48
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]

	uint16_t b_time = 0, s_bit = 0;
 80005c4:	2336      	movs	r3, #54	; 0x36
 80005c6:	18fb      	adds	r3, r7, r3
 80005c8:	2200      	movs	r2, #0
 80005ca:	801a      	strh	r2, [r3, #0]
 80005cc:	2346      	movs	r3, #70	; 0x46
 80005ce:	18fb      	adds	r3, r7, r3
 80005d0:	2200      	movs	r2, #0
 80005d2:	801a      	strh	r2, [r3, #0]
	uint8_t hum_val = 0, temp_val = 0;
 80005d4:	2345      	movs	r3, #69	; 0x45
 80005d6:	18fb      	adds	r3, r7, r3
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	2344      	movs	r3, #68	; 0x44
 80005de:	18fb      	adds	r3, r7, r3
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
	uint8_t m_data[40];

	set_gpio_mode(OUTPUT);			// set pin direction as input
 80005e4:	2001      	movs	r0, #1
 80005e6:	f7ff ffa5 	bl	8000534 <set_gpio_mode>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80005ea:	4b7e      	ldr	r3, [pc, #504]	; (80007e4 <dht11_read+0x228>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	2120      	movs	r1, #32
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 fcd6 	bl	8000fa2 <HAL_GPIO_WritePin>
	HAL_Delay(20);					// wait 20 ms in low state
 80005f6:	2014      	movs	r0, #20
 80005f8:	f000 fa6e 	bl	8000ad8 <HAL_Delay>
	set_gpio_mode(INPUT);			// set pin direction as input
 80005fc:	2000      	movs	r0, #0
 80005fe:	f7ff ff99 	bl	8000534 <set_gpio_mode>

	/* check DHT11's answer */
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000602:	4b79      	ldr	r3, [pc, #484]	; (80007e8 <dht11_read+0x22c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_SET)
 800060a:	e009      	b.n	8000620 <dht11_read+0x64>
		if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 300)
 800060c:	4b76      	ldr	r3, [pc, #472]	; (80007e8 <dht11_read+0x22c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000612:	b29a      	uxth	r2, r3
 8000614:	2396      	movs	r3, #150	; 0x96
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	429a      	cmp	r2, r3
 800061a:	d901      	bls.n	8000620 <dht11_read+0x64>
			return 0;
 800061c:	2300      	movs	r3, #0
 800061e:	e0dd      	b.n	80007dc <dht11_read+0x220>
	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_SET)
 8000620:	4b70      	ldr	r3, [pc, #448]	; (80007e4 <dht11_read+0x228>)
 8000622:	2120      	movs	r1, #32
 8000624:	0018      	movs	r0, r3
 8000626:	f000 fc9f 	bl	8000f68 <HAL_GPIO_ReadPin>
 800062a:	0003      	movs	r3, r0
 800062c:	2b01      	cmp	r3, #1
 800062e:	d0ed      	beq.n	800060c <dht11_read+0x50>
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000630:	4b6d      	ldr	r3, [pc, #436]	; (80007e8 <dht11_read+0x22c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2200      	movs	r2, #0
 8000636:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_RESET)
 8000638:	e009      	b.n	800064e <dht11_read+0x92>
		if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 300)
 800063a:	4b6b      	ldr	r3, [pc, #428]	; (80007e8 <dht11_read+0x22c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000640:	b29a      	uxth	r2, r3
 8000642:	2396      	movs	r3, #150	; 0x96
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	429a      	cmp	r2, r3
 8000648:	d901      	bls.n	800064e <dht11_read+0x92>
			return 0;
 800064a:	2300      	movs	r3, #0
 800064c:	e0c6      	b.n	80007dc <dht11_read+0x220>
	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_RESET)
 800064e:	4b65      	ldr	r3, [pc, #404]	; (80007e4 <dht11_read+0x228>)
 8000650:	2120      	movs	r1, #32
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fc88 	bl	8000f68 <HAL_GPIO_ReadPin>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d0ee      	beq.n	800063a <dht11_read+0x7e>
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 800065c:	4b62      	ldr	r3, [pc, #392]	; (80007e8 <dht11_read+0x22c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2200      	movs	r2, #0
 8000662:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_SET)
 8000664:	e009      	b.n	800067a <dht11_read+0xbe>
		if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 300)
 8000666:	4b60      	ldr	r3, [pc, #384]	; (80007e8 <dht11_read+0x22c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066c:	b29a      	uxth	r2, r3
 800066e:	2396      	movs	r3, #150	; 0x96
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	429a      	cmp	r2, r3
 8000674:	d901      	bls.n	800067a <dht11_read+0xbe>
			return 0;
 8000676:	2300      	movs	r3, #0
 8000678:	e0b0      	b.n	80007dc <dht11_read+0x220>
	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_SET)
 800067a:	4b5a      	ldr	r3, [pc, #360]	; (80007e4 <dht11_read+0x228>)
 800067c:	2120      	movs	r1, #32
 800067e:	0018      	movs	r0, r3
 8000680:	f000 fc72 	bl	8000f68 <HAL_GPIO_ReadPin>
 8000684:	0003      	movs	r3, r0
 8000686:	2b01      	cmp	r3, #1
 8000688:	d0ed      	beq.n	8000666 <dht11_read+0xaa>


	for(int j = 0; j < 40; j++){
 800068a:	2300      	movs	r3, #0
 800068c:	643b      	str	r3, [r7, #64]	; 0x40
 800068e:	e05a      	b.n	8000746 <dht11_read+0x18a>

		__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000690:	4b55      	ldr	r3, [pc, #340]	; (80007e8 <dht11_read+0x22c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2200      	movs	r2, #0
 8000696:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_RESET)
 8000698:	e009      	b.n	80006ae <dht11_read+0xf2>
			if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 300)
 800069a:	4b53      	ldr	r3, [pc, #332]	; (80007e8 <dht11_read+0x22c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	2396      	movs	r3, #150	; 0x96
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d901      	bls.n	80006ae <dht11_read+0xf2>
				return 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	e096      	b.n	80007dc <dht11_read+0x220>
		while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_RESET)
 80006ae:	4b4d      	ldr	r3, [pc, #308]	; (80007e4 <dht11_read+0x228>)
 80006b0:	2120      	movs	r1, #32
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 fc58 	bl	8000f68 <HAL_GPIO_ReadPin>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d0ee      	beq.n	800069a <dht11_read+0xde>
		__HAL_TIM_SET_COUNTER(&htim6, 0);
 80006bc:	4b4a      	ldr	r3, [pc, #296]	; (80007e8 <dht11_read+0x22c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2200      	movs	r2, #0
 80006c2:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_SET)
 80006c4:	e009      	b.n	80006da <dht11_read+0x11e>
			if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 300)
 80006c6:	4b48      	ldr	r3, [pc, #288]	; (80007e8 <dht11_read+0x22c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	2396      	movs	r3, #150	; 0x96
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d901      	bls.n	80006da <dht11_read+0x11e>
				return 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e080      	b.n	80007dc <dht11_read+0x220>
		while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_SET)
 80006da:	4b42      	ldr	r3, [pc, #264]	; (80007e4 <dht11_read+0x228>)
 80006dc:	2120      	movs	r1, #32
 80006de:	0018      	movs	r0, r3
 80006e0:	f000 fc42 	bl	8000f68 <HAL_GPIO_ReadPin>
 80006e4:	0003      	movs	r3, r0
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d0ed      	beq.n	80006c6 <dht11_read+0x10a>
		b_time = (uint16_t)__HAL_TIM_GET_COUNTER(&htim6);
 80006ea:	4b3f      	ldr	r3, [pc, #252]	; (80007e8 <dht11_read+0x22c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006f0:	2136      	movs	r1, #54	; 0x36
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	801a      	strh	r2, [r3, #0]


		if(b_time > 20 && b_time < 30){
 80006f6:	000a      	movs	r2, r1
 80006f8:	18bb      	adds	r3, r7, r2
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	2b14      	cmp	r3, #20
 80006fe:	d908      	bls.n	8000712 <dht11_read+0x156>
 8000700:	18bb      	adds	r3, r7, r2
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	2b1d      	cmp	r3, #29
 8000706:	d804      	bhi.n	8000712 <dht11_read+0x156>
			s_bit = 0;
 8000708:	2346      	movs	r3, #70	; 0x46
 800070a:	18fb      	adds	r3, r7, r3
 800070c:	2200      	movs	r2, #0
 800070e:	801a      	strh	r2, [r3, #0]
 8000710:	e00c      	b.n	800072c <dht11_read+0x170>
		}
		else if(b_time > 60 && b_time < 80){
 8000712:	2236      	movs	r2, #54	; 0x36
 8000714:	18bb      	adds	r3, r7, r2
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	2b3c      	cmp	r3, #60	; 0x3c
 800071a:	d907      	bls.n	800072c <dht11_read+0x170>
 800071c:	18bb      	adds	r3, r7, r2
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	2b4f      	cmp	r3, #79	; 0x4f
 8000722:	d803      	bhi.n	800072c <dht11_read+0x170>
			 s_bit = 1;
 8000724:	2346      	movs	r3, #70	; 0x46
 8000726:	18fb      	adds	r3, r7, r3
 8000728:	2201      	movs	r2, #1
 800072a:	801a      	strh	r2, [r3, #0]
		}

		m_data[j] = s_bit;
 800072c:	2346      	movs	r3, #70	; 0x46
 800072e:	18fb      	adds	r3, r7, r3
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	b2d9      	uxtb	r1, r3
 8000734:	230c      	movs	r3, #12
 8000736:	18fa      	adds	r2, r7, r3
 8000738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800073a:	18d3      	adds	r3, r2, r3
 800073c:	1c0a      	adds	r2, r1, #0
 800073e:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++){
 8000740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000742:	3301      	adds	r3, #1
 8000744:	643b      	str	r3, [r7, #64]	; 0x40
 8000746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000748:	2b27      	cmp	r3, #39	; 0x27
 800074a:	dda1      	ble.n	8000690 <dht11_read+0xd4>

	}

	for(int i = 0; i < 8; i++){
 800074c:	2300      	movs	r3, #0
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000750:	e012      	b.n	8000778 <dht11_read+0x1bc>
		hum_val += m_data[i];
 8000752:	230c      	movs	r3, #12
 8000754:	18fa      	adds	r2, r7, r3
 8000756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000758:	18d3      	adds	r3, r2, r3
 800075a:	7819      	ldrb	r1, [r3, #0]
 800075c:	2045      	movs	r0, #69	; 0x45
 800075e:	183b      	adds	r3, r7, r0
 8000760:	183a      	adds	r2, r7, r0
 8000762:	7812      	ldrb	r2, [r2, #0]
 8000764:	188a      	adds	r2, r1, r2
 8000766:	701a      	strb	r2, [r3, #0]
		hum_val = hum_val << 1;
 8000768:	183a      	adds	r2, r7, r0
 800076a:	183b      	adds	r3, r7, r0
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	18db      	adds	r3, r3, r3
 8000770:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < 8; i++){
 8000772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000774:	3301      	adds	r3, #1
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800077a:	2b07      	cmp	r3, #7
 800077c:	dde9      	ble.n	8000752 <dht11_read+0x196>
	}

	for(int i = 16; i < 24; i++){
 800077e:	2310      	movs	r3, #16
 8000780:	63bb      	str	r3, [r7, #56]	; 0x38
 8000782:	e012      	b.n	80007aa <dht11_read+0x1ee>
		temp_val += m_data[i];
 8000784:	230c      	movs	r3, #12
 8000786:	18fa      	adds	r2, r7, r3
 8000788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800078a:	18d3      	adds	r3, r2, r3
 800078c:	7819      	ldrb	r1, [r3, #0]
 800078e:	2044      	movs	r0, #68	; 0x44
 8000790:	183b      	adds	r3, r7, r0
 8000792:	183a      	adds	r2, r7, r0
 8000794:	7812      	ldrb	r2, [r2, #0]
 8000796:	188a      	adds	r2, r1, r2
 8000798:	701a      	strb	r2, [r3, #0]
		temp_val = temp_val << 1;
 800079a:	183a      	adds	r2, r7, r0
 800079c:	183b      	adds	r3, r7, r0
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	18db      	adds	r3, r3, r3
 80007a2:	7013      	strb	r3, [r2, #0]
	for(int i = 16; i < 24; i++){
 80007a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007a6:	3301      	adds	r3, #1
 80007a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80007aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007ac:	2b17      	cmp	r3, #23
 80007ae:	dde9      	ble.n	8000784 <dht11_read+0x1c8>
	}

	hum_val = hum_val >> 1;
 80007b0:	2145      	movs	r1, #69	; 0x45
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	187a      	adds	r2, r7, r1
 80007b6:	7812      	ldrb	r2, [r2, #0]
 80007b8:	0852      	lsrs	r2, r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
	temp_val = temp_val >> 1;
 80007bc:	2044      	movs	r0, #68	; 0x44
 80007be:	183b      	adds	r3, r7, r0
 80007c0:	183a      	adds	r2, r7, r0
 80007c2:	7812      	ldrb	r2, [r2, #0]
 80007c4:	0852      	lsrs	r2, r2, #1
 80007c6:	701a      	strb	r2, [r3, #0]


	r_data[0] = temp_val;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	183a      	adds	r2, r7, r0
 80007cc:	7812      	ldrb	r2, [r2, #0]
 80007ce:	701a      	strb	r2, [r3, #0]
	r_data[1] = hum_val;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3301      	adds	r3, #1
 80007d4:	187a      	adds	r2, r7, r1
 80007d6:	7812      	ldrb	r2, [r2, #0]
 80007d8:	701a      	strb	r2, [r3, #0]

	return 1;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	0018      	movs	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	b012      	add	sp, #72	; 0x48
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	48000400 	.word	0x48000400
 80007e8:	20000098 	.word	0x20000098

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <Error_Handler+0x8>
	...

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <HAL_MspInit+0x44>)
 8000800:	699a      	ldr	r2, [r3, #24]
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <HAL_MspInit+0x44>)
 8000804:	2101      	movs	r1, #1
 8000806:	430a      	orrs	r2, r1
 8000808:	619a      	str	r2, [r3, #24]
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <HAL_MspInit+0x44>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	2201      	movs	r2, #1
 8000810:	4013      	ands	r3, r2
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_MspInit+0x44>)
 8000818:	69da      	ldr	r2, [r3, #28]
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <HAL_MspInit+0x44>)
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	0549      	lsls	r1, r1, #21
 8000820:	430a      	orrs	r2, r1
 8000822:	61da      	str	r2, [r3, #28]
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <HAL_MspInit+0x44>)
 8000826:	69da      	ldr	r2, [r3, #28]
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	055b      	lsls	r3, r3, #21
 800082c:	4013      	ands	r3, r2
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	b002      	add	sp, #8
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	40021000 	.word	0x40021000

08000840 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a09      	ldr	r2, [pc, #36]	; (8000874 <HAL_TIM_Base_MspInit+0x34>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d10b      	bne.n	800086a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_TIM_Base_MspInit+0x38>)
 8000854:	69da      	ldr	r2, [r3, #28]
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_TIM_Base_MspInit+0x38>)
 8000858:	2110      	movs	r1, #16
 800085a:	430a      	orrs	r2, r1
 800085c:	61da      	str	r2, [r3, #28]
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_TIM_Base_MspInit+0x38>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	2210      	movs	r2, #16
 8000864:	4013      	ands	r3, r2
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b004      	add	sp, #16
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	40001000 	.word	0x40001000
 8000878:	40021000 	.word	0x40021000

0800087c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b08b      	sub	sp, #44	; 0x2c
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	2414      	movs	r4, #20
 8000886:	193b      	adds	r3, r7, r4
 8000888:	0018      	movs	r0, r3
 800088a:	2314      	movs	r3, #20
 800088c:	001a      	movs	r2, r3
 800088e:	2100      	movs	r1, #0
 8000890:	f001 fd60 	bl	8002354 <memset>
  if(huart->Instance==USART2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a1c      	ldr	r2, [pc, #112]	; (800090c <HAL_UART_MspInit+0x90>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d132      	bne.n	8000904 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <HAL_UART_MspInit+0x94>)
 80008a0:	69da      	ldr	r2, [r3, #28]
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <HAL_UART_MspInit+0x94>)
 80008a4:	2180      	movs	r1, #128	; 0x80
 80008a6:	0289      	lsls	r1, r1, #10
 80008a8:	430a      	orrs	r2, r1
 80008aa:	61da      	str	r2, [r3, #28]
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <HAL_UART_MspInit+0x94>)
 80008ae:	69da      	ldr	r2, [r3, #28]
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	029b      	lsls	r3, r3, #10
 80008b4:	4013      	ands	r3, r2
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_UART_MspInit+0x94>)
 80008bc:	695a      	ldr	r2, [r3, #20]
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <HAL_UART_MspInit+0x94>)
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	0289      	lsls	r1, r1, #10
 80008c4:	430a      	orrs	r2, r1
 80008c6:	615a      	str	r2, [r3, #20]
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <HAL_UART_MspInit+0x94>)
 80008ca:	695a      	ldr	r2, [r3, #20]
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	029b      	lsls	r3, r3, #10
 80008d0:	4013      	ands	r3, r2
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d6:	0021      	movs	r1, r4
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	220c      	movs	r2, #12
 80008dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2202      	movs	r2, #2
 80008e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2203      	movs	r2, #3
 80008ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2201      	movs	r2, #1
 80008f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	2390      	movs	r3, #144	; 0x90
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	0011      	movs	r1, r2
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 f9c2 	bl	8000c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b00b      	add	sp, #44	; 0x2c
 800090a:	bd90      	pop	{r4, r7, pc}
 800090c:	40004400 	.word	0x40004400
 8000910:	40021000 	.word	0x40021000

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <NMI_Handler+0x4>

0800091a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <HardFault_Handler+0x4>

08000920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000938:	f000 f8b2 	bl	8000aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800094c:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <_sbrk+0x5c>)
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <_sbrk+0x60>)
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d102      	bne.n	8000966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <_sbrk+0x64>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <_sbrk+0x68>)
 8000964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <_sbrk+0x64>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	18d3      	adds	r3, r2, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	429a      	cmp	r2, r3
 8000972:	d207      	bcs.n	8000984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000974:	f001 fcc4 	bl	8002300 <__errno>
 8000978:	0003      	movs	r3, r0
 800097a:	220c      	movs	r2, #12
 800097c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097e:	2301      	movs	r3, #1
 8000980:	425b      	negs	r3, r3
 8000982:	e009      	b.n	8000998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <_sbrk+0x64>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	18d2      	adds	r2, r2, r3
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <_sbrk+0x64>)
 8000994:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000996:	68fb      	ldr	r3, [r7, #12]
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	b006      	add	sp, #24
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20004000 	.word	0x20004000
 80009a4:	00000400 	.word	0x00000400
 80009a8:	2000008c 	.word	0x2000008c
 80009ac:	20000200 	.word	0x20000200

080009b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c2:	490e      	ldr	r1, [pc, #56]	; (80009fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <LoopForever+0xe>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d8:	4c0b      	ldr	r4, [pc, #44]	; (8000a08 <LoopForever+0x16>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009e6:	f7ff ffe3 	bl	80009b0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009ea:	f001 fc8f 	bl	800230c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ee:	f7ff fc21 	bl	8000234 <main>

080009f2 <LoopForever>:

LoopForever:
    b LoopForever
 80009f2:	e7fe      	b.n	80009f2 <LoopForever>
  ldr   r0, =_estack
 80009f4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a00:	08002c70 	.word	0x08002c70
  ldr r2, =_sbss
 8000a04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a08:	200001fc 	.word	0x200001fc

08000a0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC1_IRQHandler>
	...

08000a10 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <HAL_Init+0x24>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_Init+0x24>)
 8000a1a:	2110      	movs	r1, #16
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a20:	2000      	movs	r0, #0
 8000a22:	f000 f809 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a26:	f7ff fee7 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	40022000 	.word	0x40022000

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <HAL_InitTick+0x5c>)
 8000a42:	681c      	ldr	r4, [r3, #0]
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <HAL_InitTick+0x60>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	0019      	movs	r1, r3
 8000a4a:	23fa      	movs	r3, #250	; 0xfa
 8000a4c:	0098      	lsls	r0, r3, #2
 8000a4e:	f7ff fb65 	bl	800011c <__udivsi3>
 8000a52:	0003      	movs	r3, r0
 8000a54:	0019      	movs	r1, r3
 8000a56:	0020      	movs	r0, r4
 8000a58:	f7ff fb60 	bl	800011c <__udivsi3>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 f905 	bl	8000c6e <HAL_SYSTICK_Config>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d001      	beq.n	8000a6c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e00f      	b.n	8000a8c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d80b      	bhi.n	8000a8a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	2301      	movs	r3, #1
 8000a76:	425b      	negs	r3, r3
 8000a78:	2200      	movs	r2, #0
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 f8e2 	bl	8000c44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_InitTick+0x64>)
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e000      	b.n	8000a8c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b003      	add	sp, #12
 8000a92:	bd90      	pop	{r4, r7, pc}
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20000004 	.word	0x20000004

08000aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_IncTick+0x1c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	001a      	movs	r2, r3
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_IncTick+0x20>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	18d2      	adds	r2, r2, r3
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_IncTick+0x20>)
 8000ab2:	601a      	str	r2, [r3, #0]
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	200001e8 	.word	0x200001e8

08000ac4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <HAL_GetTick+0x10>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	200001e8 	.word	0x200001e8

08000ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae0:	f7ff fff0 	bl	8000ac4 <HAL_GetTick>
 8000ae4:	0003      	movs	r3, r0
 8000ae6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3301      	adds	r3, #1
 8000af0:	d005      	beq.n	8000afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_Delay+0x44>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	001a      	movs	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	189b      	adds	r3, r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	f7ff ffe0 	bl	8000ac4 <HAL_GetTick>
 8000b04:	0002      	movs	r2, r0
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d8f7      	bhi.n	8000b00 <HAL_Delay+0x28>
  {
  }
}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b004      	add	sp, #16
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	20000008 	.word	0x20000008

08000b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	0002      	movs	r2, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b7f      	cmp	r3, #127	; 0x7f
 8000b34:	d828      	bhi.n	8000b88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b36:	4a2f      	ldr	r2, [pc, #188]	; (8000bf4 <__NVIC_SetPriority+0xd4>)
 8000b38:	1dfb      	adds	r3, r7, #7
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	b25b      	sxtb	r3, r3
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	33c0      	adds	r3, #192	; 0xc0
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	589b      	ldr	r3, [r3, r2]
 8000b46:	1dfa      	adds	r2, r7, #7
 8000b48:	7812      	ldrb	r2, [r2, #0]
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	400a      	ands	r2, r1
 8000b50:	00d2      	lsls	r2, r2, #3
 8000b52:	21ff      	movs	r1, #255	; 0xff
 8000b54:	4091      	lsls	r1, r2
 8000b56:	000a      	movs	r2, r1
 8000b58:	43d2      	mvns	r2, r2
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	22ff      	movs	r2, #255	; 0xff
 8000b64:	401a      	ands	r2, r3
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	4003      	ands	r3, r0
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b74:	481f      	ldr	r0, [pc, #124]	; (8000bf4 <__NVIC_SetPriority+0xd4>)
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	b25b      	sxtb	r3, r3
 8000b7c:	089b      	lsrs	r3, r3, #2
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	33c0      	adds	r3, #192	; 0xc0
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b86:	e031      	b.n	8000bec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b88:	4a1b      	ldr	r2, [pc, #108]	; (8000bf8 <__NVIC_SetPriority+0xd8>)
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	0019      	movs	r1, r3
 8000b90:	230f      	movs	r3, #15
 8000b92:	400b      	ands	r3, r1
 8000b94:	3b08      	subs	r3, #8
 8000b96:	089b      	lsrs	r3, r3, #2
 8000b98:	3306      	adds	r3, #6
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	18d3      	adds	r3, r2, r3
 8000b9e:	3304      	adds	r3, #4
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	1dfa      	adds	r2, r7, #7
 8000ba4:	7812      	ldrb	r2, [r2, #0]
 8000ba6:	0011      	movs	r1, r2
 8000ba8:	2203      	movs	r2, #3
 8000baa:	400a      	ands	r2, r1
 8000bac:	00d2      	lsls	r2, r2, #3
 8000bae:	21ff      	movs	r1, #255	; 0xff
 8000bb0:	4091      	lsls	r1, r2
 8000bb2:	000a      	movs	r2, r1
 8000bb4:	43d2      	mvns	r2, r2
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	019b      	lsls	r3, r3, #6
 8000bbe:	22ff      	movs	r2, #255	; 0xff
 8000bc0:	401a      	ands	r2, r3
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	2303      	movs	r3, #3
 8000bca:	4003      	ands	r3, r0
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd0:	4809      	ldr	r0, [pc, #36]	; (8000bf8 <__NVIC_SetPriority+0xd8>)
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	001c      	movs	r4, r3
 8000bd8:	230f      	movs	r3, #15
 8000bda:	4023      	ands	r3, r4
 8000bdc:	3b08      	subs	r3, #8
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	430a      	orrs	r2, r1
 8000be2:	3306      	adds	r3, #6
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	18c3      	adds	r3, r0, r3
 8000be8:	3304      	adds	r3, #4
 8000bea:	601a      	str	r2, [r3, #0]
}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b003      	add	sp, #12
 8000bf2:	bd90      	pop	{r4, r7, pc}
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	1e5a      	subs	r2, r3, #1
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	045b      	lsls	r3, r3, #17
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d301      	bcc.n	8000c14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c10:	2301      	movs	r3, #1
 8000c12:	e010      	b.n	8000c36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <SysTick_Config+0x44>)
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	425b      	negs	r3, r3
 8000c20:	2103      	movs	r1, #3
 8000c22:	0018      	movs	r0, r3
 8000c24:	f7ff ff7c 	bl	8000b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <SysTick_Config+0x44>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <SysTick_Config+0x44>)
 8000c30:	2207      	movs	r2, #7
 8000c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	0018      	movs	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b002      	add	sp, #8
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	e000e010 	.word	0xe000e010

08000c44 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
 8000c4e:	210f      	movs	r1, #15
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	1c02      	adds	r2, r0, #0
 8000c54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b25b      	sxtb	r3, r3
 8000c5e:	0011      	movs	r1, r2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f7ff ff5d 	bl	8000b20 <__NVIC_SetPriority>
}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b004      	add	sp, #16
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f7ff ffbf 	bl	8000bfc <SysTick_Config>
 8000c7e:	0003      	movs	r3, r0
}
 8000c80:	0018      	movs	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b002      	add	sp, #8
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c96:	e14f      	b.n	8000f38 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	4091      	lsls	r1, r2
 8000ca2:	000a      	movs	r2, r1
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d100      	bne.n	8000cb0 <HAL_GPIO_Init+0x28>
 8000cae:	e140      	b.n	8000f32 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d005      	beq.n	8000cc8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d130      	bne.n	8000d2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	409a      	lsls	r2, r3
 8000cd6:	0013      	movs	r3, r2
 8000cd8:	43da      	mvns	r2, r3
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	409a      	lsls	r2, r3
 8000cea:	0013      	movs	r3, r2
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cfe:	2201      	movs	r2, #1
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
 8000d04:	0013      	movs	r3, r2
 8000d06:	43da      	mvns	r2, r3
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	091b      	lsrs	r3, r3, #4
 8000d14:	2201      	movs	r2, #1
 8000d16:	401a      	ands	r2, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	409a      	lsls	r2, r3
 8000d1c:	0013      	movs	r3, r2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2203      	movs	r2, #3
 8000d30:	4013      	ands	r3, r2
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d017      	beq.n	8000d66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	2203      	movs	r2, #3
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	43da      	mvns	r2, r3
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	409a      	lsls	r2, r3
 8000d58:	0013      	movs	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d123      	bne.n	8000dba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	08da      	lsrs	r2, r3, #3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3208      	adds	r2, #8
 8000d7a:	0092      	lsls	r2, r2, #2
 8000d7c:	58d3      	ldr	r3, [r2, r3]
 8000d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	2207      	movs	r2, #7
 8000d84:	4013      	ands	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	220f      	movs	r2, #15
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	691a      	ldr	r2, [r3, #16]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	2107      	movs	r1, #7
 8000d9e:	400b      	ands	r3, r1
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	409a      	lsls	r2, r3
 8000da4:	0013      	movs	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	08da      	lsrs	r2, r3, #3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3208      	adds	r2, #8
 8000db4:	0092      	lsls	r2, r2, #2
 8000db6:	6939      	ldr	r1, [r7, #16]
 8000db8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	0013      	movs	r3, r2
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	401a      	ands	r2, r3
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	409a      	lsls	r2, r3
 8000de0:	0013      	movs	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	23c0      	movs	r3, #192	; 0xc0
 8000df4:	029b      	lsls	r3, r3, #10
 8000df6:	4013      	ands	r3, r2
 8000df8:	d100      	bne.n	8000dfc <HAL_GPIO_Init+0x174>
 8000dfa:	e09a      	b.n	8000f32 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfc:	4b54      	ldr	r3, [pc, #336]	; (8000f50 <HAL_GPIO_Init+0x2c8>)
 8000dfe:	699a      	ldr	r2, [r3, #24]
 8000e00:	4b53      	ldr	r3, [pc, #332]	; (8000f50 <HAL_GPIO_Init+0x2c8>)
 8000e02:	2101      	movs	r1, #1
 8000e04:	430a      	orrs	r2, r1
 8000e06:	619a      	str	r2, [r3, #24]
 8000e08:	4b51      	ldr	r3, [pc, #324]	; (8000f50 <HAL_GPIO_Init+0x2c8>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4013      	ands	r3, r2
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e14:	4a4f      	ldr	r2, [pc, #316]	; (8000f54 <HAL_GPIO_Init+0x2cc>)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	589b      	ldr	r3, [r3, r2]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	2203      	movs	r2, #3
 8000e26:	4013      	ands	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	220f      	movs	r2, #15
 8000e2c:	409a      	lsls	r2, r3
 8000e2e:	0013      	movs	r3, r2
 8000e30:	43da      	mvns	r2, r3
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	2390      	movs	r3, #144	; 0x90
 8000e3c:	05db      	lsls	r3, r3, #23
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d013      	beq.n	8000e6a <HAL_GPIO_Init+0x1e2>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a44      	ldr	r2, [pc, #272]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d00d      	beq.n	8000e66 <HAL_GPIO_Init+0x1de>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a43      	ldr	r2, [pc, #268]	; (8000f5c <HAL_GPIO_Init+0x2d4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d007      	beq.n	8000e62 <HAL_GPIO_Init+0x1da>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a42      	ldr	r2, [pc, #264]	; (8000f60 <HAL_GPIO_Init+0x2d8>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d101      	bne.n	8000e5e <HAL_GPIO_Init+0x1d6>
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e006      	b.n	8000e6c <HAL_GPIO_Init+0x1e4>
 8000e5e:	2305      	movs	r3, #5
 8000e60:	e004      	b.n	8000e6c <HAL_GPIO_Init+0x1e4>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e002      	b.n	8000e6c <HAL_GPIO_Init+0x1e4>
 8000e66:	2301      	movs	r3, #1
 8000e68:	e000      	b.n	8000e6c <HAL_GPIO_Init+0x1e4>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	2103      	movs	r1, #3
 8000e70:	400a      	ands	r2, r1
 8000e72:	0092      	lsls	r2, r2, #2
 8000e74:	4093      	lsls	r3, r2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e7c:	4935      	ldr	r1, [pc, #212]	; (8000f54 <HAL_GPIO_Init+0x2cc>)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	089b      	lsrs	r3, r3, #2
 8000e82:	3302      	adds	r3, #2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e8a:	4b36      	ldr	r3, [pc, #216]	; (8000f64 <HAL_GPIO_Init+0x2dc>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	43da      	mvns	r2, r3
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	025b      	lsls	r3, r3, #9
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000eae:	4b2d      	ldr	r3, [pc, #180]	; (8000f64 <HAL_GPIO_Init+0x2dc>)
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <HAL_GPIO_Init+0x2dc>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	43da      	mvns	r2, r3
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	029b      	lsls	r3, r3, #10
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ed8:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <HAL_GPIO_Init+0x2dc>)
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <HAL_GPIO_Init+0x2dc>)
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	035b      	lsls	r3, r3, #13
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f02:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <HAL_GPIO_Init+0x2dc>)
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <HAL_GPIO_Init+0x2dc>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	43da      	mvns	r2, r3
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	039b      	lsls	r3, r3, #14
 8000f20:	4013      	ands	r3, r2
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <HAL_GPIO_Init+0x2dc>)
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3301      	adds	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	40da      	lsrs	r2, r3
 8000f40:	1e13      	subs	r3, r2, #0
 8000f42:	d000      	beq.n	8000f46 <HAL_GPIO_Init+0x2be>
 8000f44:	e6a8      	b.n	8000c98 <HAL_GPIO_Init+0x10>
  } 
}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b006      	add	sp, #24
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40010000 	.word	0x40010000
 8000f58:	48000400 	.word	0x48000400
 8000f5c:	48000800 	.word	0x48000800
 8000f60:	48000c00 	.word	0x48000c00
 8000f64:	40010400 	.word	0x40010400

08000f68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	000a      	movs	r2, r1
 8000f72:	1cbb      	adds	r3, r7, #2
 8000f74:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	1cba      	adds	r2, r7, #2
 8000f7c:	8812      	ldrh	r2, [r2, #0]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d004      	beq.n	8000f8c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000f82:	230f      	movs	r3, #15
 8000f84:	18fb      	adds	r3, r7, r3
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
 8000f8a:	e003      	b.n	8000f94 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000f94:	230f      	movs	r3, #15
 8000f96:	18fb      	adds	r3, r7, r3
 8000f98:	781b      	ldrb	r3, [r3, #0]
  }
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b004      	add	sp, #16
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	0008      	movs	r0, r1
 8000fac:	0011      	movs	r1, r2
 8000fae:	1cbb      	adds	r3, r7, #2
 8000fb0:	1c02      	adds	r2, r0, #0
 8000fb2:	801a      	strh	r2, [r3, #0]
 8000fb4:	1c7b      	adds	r3, r7, #1
 8000fb6:	1c0a      	adds	r2, r1, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fba:	1c7b      	adds	r3, r7, #1
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d004      	beq.n	8000fcc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fc2:	1cbb      	adds	r3, r7, #2
 8000fc4:	881a      	ldrh	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fca:	e003      	b.n	8000fd4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fcc:	1cbb      	adds	r3, r7, #2
 8000fce:	881a      	ldrh	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b002      	add	sp, #8
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e305      	b.n	80015fa <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d100      	bne.n	8000ffa <HAL_RCC_OscConfig+0x1e>
 8000ff8:	e08d      	b.n	8001116 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ffa:	4bc5      	ldr	r3, [pc, #788]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	220c      	movs	r2, #12
 8001000:	4013      	ands	r3, r2
 8001002:	2b04      	cmp	r3, #4
 8001004:	d00e      	beq.n	8001024 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001006:	4bc2      	ldr	r3, [pc, #776]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	220c      	movs	r2, #12
 800100c:	4013      	ands	r3, r2
 800100e:	2b08      	cmp	r3, #8
 8001010:	d116      	bne.n	8001040 <HAL_RCC_OscConfig+0x64>
 8001012:	4bbf      	ldr	r3, [pc, #764]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	23c0      	movs	r3, #192	; 0xc0
 8001018:	025b      	lsls	r3, r3, #9
 800101a:	401a      	ands	r2, r3
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	025b      	lsls	r3, r3, #9
 8001020:	429a      	cmp	r2, r3
 8001022:	d10d      	bne.n	8001040 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001024:	4bba      	ldr	r3, [pc, #744]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	029b      	lsls	r3, r3, #10
 800102c:	4013      	ands	r3, r2
 800102e:	d100      	bne.n	8001032 <HAL_RCC_OscConfig+0x56>
 8001030:	e070      	b.n	8001114 <HAL_RCC_OscConfig+0x138>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d000      	beq.n	800103c <HAL_RCC_OscConfig+0x60>
 800103a:	e06b      	b.n	8001114 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e2dc      	b.n	80015fa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d107      	bne.n	8001058 <HAL_RCC_OscConfig+0x7c>
 8001048:	4bb1      	ldr	r3, [pc, #708]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4bb0      	ldr	r3, [pc, #704]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 800104e:	2180      	movs	r1, #128	; 0x80
 8001050:	0249      	lsls	r1, r1, #9
 8001052:	430a      	orrs	r2, r1
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	e02f      	b.n	80010b8 <HAL_RCC_OscConfig+0xdc>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d10c      	bne.n	800107a <HAL_RCC_OscConfig+0x9e>
 8001060:	4bab      	ldr	r3, [pc, #684]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4baa      	ldr	r3, [pc, #680]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001066:	49ab      	ldr	r1, [pc, #684]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 8001068:	400a      	ands	r2, r1
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	4ba8      	ldr	r3, [pc, #672]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4ba7      	ldr	r3, [pc, #668]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001072:	49a9      	ldr	r1, [pc, #676]	; (8001318 <HAL_RCC_OscConfig+0x33c>)
 8001074:	400a      	ands	r2, r1
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	e01e      	b.n	80010b8 <HAL_RCC_OscConfig+0xdc>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b05      	cmp	r3, #5
 8001080:	d10e      	bne.n	80010a0 <HAL_RCC_OscConfig+0xc4>
 8001082:	4ba3      	ldr	r3, [pc, #652]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4ba2      	ldr	r3, [pc, #648]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	02c9      	lsls	r1, r1, #11
 800108c:	430a      	orrs	r2, r1
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	4b9f      	ldr	r3, [pc, #636]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b9e      	ldr	r3, [pc, #632]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001096:	2180      	movs	r1, #128	; 0x80
 8001098:	0249      	lsls	r1, r1, #9
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	e00b      	b.n	80010b8 <HAL_RCC_OscConfig+0xdc>
 80010a0:	4b9b      	ldr	r3, [pc, #620]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b9a      	ldr	r3, [pc, #616]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 80010a6:	499b      	ldr	r1, [pc, #620]	; (8001314 <HAL_RCC_OscConfig+0x338>)
 80010a8:	400a      	ands	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	4b98      	ldr	r3, [pc, #608]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b97      	ldr	r3, [pc, #604]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 80010b2:	4999      	ldr	r1, [pc, #612]	; (8001318 <HAL_RCC_OscConfig+0x33c>)
 80010b4:	400a      	ands	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d014      	beq.n	80010ea <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fd00 	bl	8000ac4 <HAL_GetTick>
 80010c4:	0003      	movs	r3, r0
 80010c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c8:	e008      	b.n	80010dc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ca:	f7ff fcfb 	bl	8000ac4 <HAL_GetTick>
 80010ce:	0002      	movs	r2, r0
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b64      	cmp	r3, #100	; 0x64
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e28e      	b.n	80015fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010dc:	4b8c      	ldr	r3, [pc, #560]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	029b      	lsls	r3, r3, #10
 80010e4:	4013      	ands	r3, r2
 80010e6:	d0f0      	beq.n	80010ca <HAL_RCC_OscConfig+0xee>
 80010e8:	e015      	b.n	8001116 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ea:	f7ff fceb 	bl	8000ac4 <HAL_GetTick>
 80010ee:	0003      	movs	r3, r0
 80010f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f4:	f7ff fce6 	bl	8000ac4 <HAL_GetTick>
 80010f8:	0002      	movs	r2, r0
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b64      	cmp	r3, #100	; 0x64
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e279      	b.n	80015fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001106:	4b82      	ldr	r3, [pc, #520]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	029b      	lsls	r3, r3, #10
 800110e:	4013      	ands	r3, r2
 8001110:	d1f0      	bne.n	80010f4 <HAL_RCC_OscConfig+0x118>
 8001112:	e000      	b.n	8001116 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001114:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2202      	movs	r2, #2
 800111c:	4013      	ands	r3, r2
 800111e:	d100      	bne.n	8001122 <HAL_RCC_OscConfig+0x146>
 8001120:	e06c      	b.n	80011fc <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001122:	4b7b      	ldr	r3, [pc, #492]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	220c      	movs	r2, #12
 8001128:	4013      	ands	r3, r2
 800112a:	d00e      	beq.n	800114a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800112c:	4b78      	ldr	r3, [pc, #480]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	220c      	movs	r2, #12
 8001132:	4013      	ands	r3, r2
 8001134:	2b08      	cmp	r3, #8
 8001136:	d11f      	bne.n	8001178 <HAL_RCC_OscConfig+0x19c>
 8001138:	4b75      	ldr	r3, [pc, #468]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	23c0      	movs	r3, #192	; 0xc0
 800113e:	025b      	lsls	r3, r3, #9
 8001140:	401a      	ands	r2, r3
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	429a      	cmp	r2, r3
 8001148:	d116      	bne.n	8001178 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114a:	4b71      	ldr	r3, [pc, #452]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2202      	movs	r2, #2
 8001150:	4013      	ands	r3, r2
 8001152:	d005      	beq.n	8001160 <HAL_RCC_OscConfig+0x184>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d001      	beq.n	8001160 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e24c      	b.n	80015fa <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001160:	4b6b      	ldr	r3, [pc, #428]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	22f8      	movs	r2, #248	; 0xf8
 8001166:	4393      	bics	r3, r2
 8001168:	0019      	movs	r1, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	00da      	lsls	r2, r3, #3
 8001170:	4b67      	ldr	r3, [pc, #412]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001172:	430a      	orrs	r2, r1
 8001174:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001176:	e041      	b.n	80011fc <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d024      	beq.n	80011ca <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001180:	4b63      	ldr	r3, [pc, #396]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b62      	ldr	r3, [pc, #392]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001186:	2101      	movs	r1, #1
 8001188:	430a      	orrs	r2, r1
 800118a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fc9a 	bl	8000ac4 <HAL_GetTick>
 8001190:	0003      	movs	r3, r0
 8001192:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001196:	f7ff fc95 	bl	8000ac4 <HAL_GetTick>
 800119a:	0002      	movs	r2, r0
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e228      	b.n	80015fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a8:	4b59      	ldr	r3, [pc, #356]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2202      	movs	r2, #2
 80011ae:	4013      	ands	r3, r2
 80011b0:	d0f1      	beq.n	8001196 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b2:	4b57      	ldr	r3, [pc, #348]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	22f8      	movs	r2, #248	; 0xf8
 80011b8:	4393      	bics	r3, r2
 80011ba:	0019      	movs	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	00da      	lsls	r2, r3, #3
 80011c2:	4b53      	ldr	r3, [pc, #332]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 80011c4:	430a      	orrs	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	e018      	b.n	80011fc <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ca:	4b51      	ldr	r3, [pc, #324]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b50      	ldr	r3, [pc, #320]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 80011d0:	2101      	movs	r1, #1
 80011d2:	438a      	bics	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d6:	f7ff fc75 	bl	8000ac4 <HAL_GetTick>
 80011da:	0003      	movs	r3, r0
 80011dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e0:	f7ff fc70 	bl	8000ac4 <HAL_GetTick>
 80011e4:	0002      	movs	r2, r0
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e203      	b.n	80015fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f2:	4b47      	ldr	r3, [pc, #284]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2202      	movs	r2, #2
 80011f8:	4013      	ands	r3, r2
 80011fa:	d1f1      	bne.n	80011e0 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2208      	movs	r2, #8
 8001202:	4013      	ands	r3, r2
 8001204:	d036      	beq.n	8001274 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d019      	beq.n	8001242 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800120e:	4b40      	ldr	r3, [pc, #256]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001210:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001212:	4b3f      	ldr	r3, [pc, #252]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001214:	2101      	movs	r1, #1
 8001216:	430a      	orrs	r2, r1
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121a:	f7ff fc53 	bl	8000ac4 <HAL_GetTick>
 800121e:	0003      	movs	r3, r0
 8001220:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001224:	f7ff fc4e 	bl	8000ac4 <HAL_GetTick>
 8001228:	0002      	movs	r2, r0
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e1e1      	b.n	80015fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001236:	4b36      	ldr	r3, [pc, #216]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	2202      	movs	r2, #2
 800123c:	4013      	ands	r3, r2
 800123e:	d0f1      	beq.n	8001224 <HAL_RCC_OscConfig+0x248>
 8001240:	e018      	b.n	8001274 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001242:	4b33      	ldr	r3, [pc, #204]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001246:	4b32      	ldr	r3, [pc, #200]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001248:	2101      	movs	r1, #1
 800124a:	438a      	bics	r2, r1
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124e:	f7ff fc39 	bl	8000ac4 <HAL_GetTick>
 8001252:	0003      	movs	r3, r0
 8001254:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001258:	f7ff fc34 	bl	8000ac4 <HAL_GetTick>
 800125c:	0002      	movs	r2, r0
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e1c7      	b.n	80015fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800126a:	4b29      	ldr	r3, [pc, #164]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	2202      	movs	r2, #2
 8001270:	4013      	ands	r3, r2
 8001272:	d1f1      	bne.n	8001258 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2204      	movs	r2, #4
 800127a:	4013      	ands	r3, r2
 800127c:	d100      	bne.n	8001280 <HAL_RCC_OscConfig+0x2a4>
 800127e:	e0b5      	b.n	80013ec <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001280:	201f      	movs	r0, #31
 8001282:	183b      	adds	r3, r7, r0
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001288:	4b21      	ldr	r3, [pc, #132]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 800128a:	69da      	ldr	r2, [r3, #28]
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	055b      	lsls	r3, r3, #21
 8001290:	4013      	ands	r3, r2
 8001292:	d110      	bne.n	80012b6 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001294:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001296:	69da      	ldr	r2, [r3, #28]
 8001298:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	0549      	lsls	r1, r1, #21
 800129e:	430a      	orrs	r2, r1
 80012a0:	61da      	str	r2, [r3, #28]
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 80012a4:	69da      	ldr	r2, [r3, #28]
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	055b      	lsls	r3, r3, #21
 80012aa:	4013      	ands	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012b0:	183b      	adds	r3, r7, r0
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_RCC_OscConfig+0x340>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4013      	ands	r3, r2
 80012c0:	d11a      	bne.n	80012f8 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012c2:	4b16      	ldr	r3, [pc, #88]	; (800131c <HAL_RCC_OscConfig+0x340>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_RCC_OscConfig+0x340>)
 80012c8:	2180      	movs	r1, #128	; 0x80
 80012ca:	0049      	lsls	r1, r1, #1
 80012cc:	430a      	orrs	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012d0:	f7ff fbf8 	bl	8000ac4 <HAL_GetTick>
 80012d4:	0003      	movs	r3, r0
 80012d6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012da:	f7ff fbf3 	bl	8000ac4 <HAL_GetTick>
 80012de:	0002      	movs	r2, r0
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b64      	cmp	r3, #100	; 0x64
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e186      	b.n	80015fa <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_RCC_OscConfig+0x340>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4013      	ands	r3, r2
 80012f6:	d0f0      	beq.n	80012da <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d10f      	bne.n	8001320 <HAL_RCC_OscConfig+0x344>
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001302:	6a1a      	ldr	r2, [r3, #32]
 8001304:	4b02      	ldr	r3, [pc, #8]	; (8001310 <HAL_RCC_OscConfig+0x334>)
 8001306:	2101      	movs	r1, #1
 8001308:	430a      	orrs	r2, r1
 800130a:	621a      	str	r2, [r3, #32]
 800130c:	e036      	b.n	800137c <HAL_RCC_OscConfig+0x3a0>
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	40021000 	.word	0x40021000
 8001314:	fffeffff 	.word	0xfffeffff
 8001318:	fffbffff 	.word	0xfffbffff
 800131c:	40007000 	.word	0x40007000
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10c      	bne.n	8001342 <HAL_RCC_OscConfig+0x366>
 8001328:	4bb6      	ldr	r3, [pc, #728]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 800132a:	6a1a      	ldr	r2, [r3, #32]
 800132c:	4bb5      	ldr	r3, [pc, #724]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 800132e:	2101      	movs	r1, #1
 8001330:	438a      	bics	r2, r1
 8001332:	621a      	str	r2, [r3, #32]
 8001334:	4bb3      	ldr	r3, [pc, #716]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 8001336:	6a1a      	ldr	r2, [r3, #32]
 8001338:	4bb2      	ldr	r3, [pc, #712]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 800133a:	2104      	movs	r1, #4
 800133c:	438a      	bics	r2, r1
 800133e:	621a      	str	r2, [r3, #32]
 8001340:	e01c      	b.n	800137c <HAL_RCC_OscConfig+0x3a0>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b05      	cmp	r3, #5
 8001348:	d10c      	bne.n	8001364 <HAL_RCC_OscConfig+0x388>
 800134a:	4bae      	ldr	r3, [pc, #696]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 800134c:	6a1a      	ldr	r2, [r3, #32]
 800134e:	4bad      	ldr	r3, [pc, #692]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 8001350:	2104      	movs	r1, #4
 8001352:	430a      	orrs	r2, r1
 8001354:	621a      	str	r2, [r3, #32]
 8001356:	4bab      	ldr	r3, [pc, #684]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 8001358:	6a1a      	ldr	r2, [r3, #32]
 800135a:	4baa      	ldr	r3, [pc, #680]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 800135c:	2101      	movs	r1, #1
 800135e:	430a      	orrs	r2, r1
 8001360:	621a      	str	r2, [r3, #32]
 8001362:	e00b      	b.n	800137c <HAL_RCC_OscConfig+0x3a0>
 8001364:	4ba7      	ldr	r3, [pc, #668]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 8001366:	6a1a      	ldr	r2, [r3, #32]
 8001368:	4ba6      	ldr	r3, [pc, #664]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 800136a:	2101      	movs	r1, #1
 800136c:	438a      	bics	r2, r1
 800136e:	621a      	str	r2, [r3, #32]
 8001370:	4ba4      	ldr	r3, [pc, #656]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 8001372:	6a1a      	ldr	r2, [r3, #32]
 8001374:	4ba3      	ldr	r3, [pc, #652]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 8001376:	2104      	movs	r1, #4
 8001378:	438a      	bics	r2, r1
 800137a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d014      	beq.n	80013ae <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001384:	f7ff fb9e 	bl	8000ac4 <HAL_GetTick>
 8001388:	0003      	movs	r3, r0
 800138a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138c:	e009      	b.n	80013a2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800138e:	f7ff fb99 	bl	8000ac4 <HAL_GetTick>
 8001392:	0002      	movs	r2, r0
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	4a9b      	ldr	r2, [pc, #620]	; (8001608 <HAL_RCC_OscConfig+0x62c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e12b      	b.n	80015fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a2:	4b98      	ldr	r3, [pc, #608]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	2202      	movs	r2, #2
 80013a8:	4013      	ands	r3, r2
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x3b2>
 80013ac:	e013      	b.n	80013d6 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ae:	f7ff fb89 	bl	8000ac4 <HAL_GetTick>
 80013b2:	0003      	movs	r3, r0
 80013b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b6:	e009      	b.n	80013cc <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b8:	f7ff fb84 	bl	8000ac4 <HAL_GetTick>
 80013bc:	0002      	movs	r2, r0
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	4a91      	ldr	r2, [pc, #580]	; (8001608 <HAL_RCC_OscConfig+0x62c>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e116      	b.n	80015fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013cc:	4b8d      	ldr	r3, [pc, #564]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	2202      	movs	r2, #2
 80013d2:	4013      	ands	r3, r2
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013d6:	231f      	movs	r3, #31
 80013d8:	18fb      	adds	r3, r7, r3
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d105      	bne.n	80013ec <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e0:	4b88      	ldr	r3, [pc, #544]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 80013e2:	69da      	ldr	r2, [r3, #28]
 80013e4:	4b87      	ldr	r3, [pc, #540]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 80013e6:	4989      	ldr	r1, [pc, #548]	; (800160c <HAL_RCC_OscConfig+0x630>)
 80013e8:	400a      	ands	r2, r1
 80013ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2210      	movs	r2, #16
 80013f2:	4013      	ands	r3, r2
 80013f4:	d063      	beq.n	80014be <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d12a      	bne.n	8001454 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013fe:	4b81      	ldr	r3, [pc, #516]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 8001400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001402:	4b80      	ldr	r3, [pc, #512]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 8001404:	2104      	movs	r1, #4
 8001406:	430a      	orrs	r2, r1
 8001408:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800140a:	4b7e      	ldr	r3, [pc, #504]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 800140c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800140e:	4b7d      	ldr	r3, [pc, #500]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 8001410:	2101      	movs	r1, #1
 8001412:	430a      	orrs	r2, r1
 8001414:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001416:	f7ff fb55 	bl	8000ac4 <HAL_GetTick>
 800141a:	0003      	movs	r3, r0
 800141c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001420:	f7ff fb50 	bl	8000ac4 <HAL_GetTick>
 8001424:	0002      	movs	r2, r0
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e0e3      	b.n	80015fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001432:	4b74      	ldr	r3, [pc, #464]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 8001434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001436:	2202      	movs	r2, #2
 8001438:	4013      	ands	r3, r2
 800143a:	d0f1      	beq.n	8001420 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800143c:	4b71      	ldr	r3, [pc, #452]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 800143e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001440:	22f8      	movs	r2, #248	; 0xf8
 8001442:	4393      	bics	r3, r2
 8001444:	0019      	movs	r1, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	00da      	lsls	r2, r3, #3
 800144c:	4b6d      	ldr	r3, [pc, #436]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 800144e:	430a      	orrs	r2, r1
 8001450:	635a      	str	r2, [r3, #52]	; 0x34
 8001452:	e034      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	3305      	adds	r3, #5
 800145a:	d111      	bne.n	8001480 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800145c:	4b69      	ldr	r3, [pc, #420]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 800145e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001460:	4b68      	ldr	r3, [pc, #416]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 8001462:	2104      	movs	r1, #4
 8001464:	438a      	bics	r2, r1
 8001466:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001468:	4b66      	ldr	r3, [pc, #408]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 800146a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800146c:	22f8      	movs	r2, #248	; 0xf8
 800146e:	4393      	bics	r3, r2
 8001470:	0019      	movs	r1, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	00da      	lsls	r2, r3, #3
 8001478:	4b62      	ldr	r3, [pc, #392]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 800147a:	430a      	orrs	r2, r1
 800147c:	635a      	str	r2, [r3, #52]	; 0x34
 800147e:	e01e      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001480:	4b60      	ldr	r3, [pc, #384]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 8001482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001484:	4b5f      	ldr	r3, [pc, #380]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 8001486:	2104      	movs	r1, #4
 8001488:	430a      	orrs	r2, r1
 800148a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800148c:	4b5d      	ldr	r3, [pc, #372]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 800148e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001490:	4b5c      	ldr	r3, [pc, #368]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 8001492:	2101      	movs	r1, #1
 8001494:	438a      	bics	r2, r1
 8001496:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001498:	f7ff fb14 	bl	8000ac4 <HAL_GetTick>
 800149c:	0003      	movs	r3, r0
 800149e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014a2:	f7ff fb0f 	bl	8000ac4 <HAL_GetTick>
 80014a6:	0002      	movs	r2, r0
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e0a2      	b.n	80015fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014b4:	4b53      	ldr	r3, [pc, #332]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 80014b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b8:	2202      	movs	r2, #2
 80014ba:	4013      	ands	r3, r2
 80014bc:	d1f1      	bne.n	80014a2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d100      	bne.n	80014c8 <HAL_RCC_OscConfig+0x4ec>
 80014c6:	e097      	b.n	80015f8 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c8:	4b4e      	ldr	r3, [pc, #312]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	220c      	movs	r2, #12
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d100      	bne.n	80014d6 <HAL_RCC_OscConfig+0x4fa>
 80014d4:	e06b      	b.n	80015ae <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d14c      	bne.n	8001578 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014de:	4b49      	ldr	r3, [pc, #292]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b48      	ldr	r3, [pc, #288]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 80014e4:	494a      	ldr	r1, [pc, #296]	; (8001610 <HAL_RCC_OscConfig+0x634>)
 80014e6:	400a      	ands	r2, r1
 80014e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ea:	f7ff faeb 	bl	8000ac4 <HAL_GetTick>
 80014ee:	0003      	movs	r3, r0
 80014f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f4:	f7ff fae6 	bl	8000ac4 <HAL_GetTick>
 80014f8:	0002      	movs	r2, r0
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e079      	b.n	80015fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001506:	4b3f      	ldr	r3, [pc, #252]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	049b      	lsls	r3, r3, #18
 800150e:	4013      	ands	r3, r2
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001512:	4b3c      	ldr	r3, [pc, #240]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	220f      	movs	r2, #15
 8001518:	4393      	bics	r3, r2
 800151a:	0019      	movs	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001520:	4b38      	ldr	r3, [pc, #224]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 8001522:	430a      	orrs	r2, r1
 8001524:	62da      	str	r2, [r3, #44]	; 0x2c
 8001526:	4b37      	ldr	r3, [pc, #220]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4a3a      	ldr	r2, [pc, #232]	; (8001614 <HAL_RCC_OscConfig+0x638>)
 800152c:	4013      	ands	r3, r2
 800152e:	0019      	movs	r1, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	431a      	orrs	r2, r3
 800153a:	4b32      	ldr	r3, [pc, #200]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 800153c:	430a      	orrs	r2, r1
 800153e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001540:	4b30      	ldr	r3, [pc, #192]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b2f      	ldr	r3, [pc, #188]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 8001546:	2180      	movs	r1, #128	; 0x80
 8001548:	0449      	lsls	r1, r1, #17
 800154a:	430a      	orrs	r2, r1
 800154c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154e:	f7ff fab9 	bl	8000ac4 <HAL_GetTick>
 8001552:	0003      	movs	r3, r0
 8001554:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001558:	f7ff fab4 	bl	8000ac4 <HAL_GetTick>
 800155c:	0002      	movs	r2, r0
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e047      	b.n	80015fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800156a:	4b26      	ldr	r3, [pc, #152]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	049b      	lsls	r3, r3, #18
 8001572:	4013      	ands	r3, r2
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0x57c>
 8001576:	e03f      	b.n	80015f8 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001578:	4b22      	ldr	r3, [pc, #136]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b21      	ldr	r3, [pc, #132]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 800157e:	4924      	ldr	r1, [pc, #144]	; (8001610 <HAL_RCC_OscConfig+0x634>)
 8001580:	400a      	ands	r2, r1
 8001582:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fa9e 	bl	8000ac4 <HAL_GetTick>
 8001588:	0003      	movs	r3, r0
 800158a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158e:	f7ff fa99 	bl	8000ac4 <HAL_GetTick>
 8001592:	0002      	movs	r2, r0
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e02c      	b.n	80015fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	049b      	lsls	r3, r3, #18
 80015a8:	4013      	ands	r3, r2
 80015aa:	d1f0      	bne.n	800158e <HAL_RCC_OscConfig+0x5b2>
 80015ac:	e024      	b.n	80015f8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e01f      	b.n	80015fa <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80015c0:	4b10      	ldr	r3, [pc, #64]	; (8001604 <HAL_RCC_OscConfig+0x628>)
 80015c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	23c0      	movs	r3, #192	; 0xc0
 80015ca:	025b      	lsls	r3, r3, #9
 80015cc:	401a      	ands	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d10e      	bne.n	80015f4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	220f      	movs	r2, #15
 80015da:	401a      	ands	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d107      	bne.n	80015f4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	23f0      	movs	r3, #240	; 0xf0
 80015e8:	039b      	lsls	r3, r3, #14
 80015ea:	401a      	ands	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	0018      	movs	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b008      	add	sp, #32
 8001600:	bd80      	pop	{r7, pc}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	40021000 	.word	0x40021000
 8001608:	00001388 	.word	0x00001388
 800160c:	efffffff 	.word	0xefffffff
 8001610:	feffffff 	.word	0xfeffffff
 8001614:	ffc27fff 	.word	0xffc27fff

08001618 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0b3      	b.n	8001794 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800162c:	4b5b      	ldr	r3, [pc, #364]	; (800179c <HAL_RCC_ClockConfig+0x184>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2201      	movs	r2, #1
 8001632:	4013      	ands	r3, r2
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d911      	bls.n	800165e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163a:	4b58      	ldr	r3, [pc, #352]	; (800179c <HAL_RCC_ClockConfig+0x184>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2201      	movs	r2, #1
 8001640:	4393      	bics	r3, r2
 8001642:	0019      	movs	r1, r3
 8001644:	4b55      	ldr	r3, [pc, #340]	; (800179c <HAL_RCC_ClockConfig+0x184>)
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800164c:	4b53      	ldr	r3, [pc, #332]	; (800179c <HAL_RCC_ClockConfig+0x184>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2201      	movs	r2, #1
 8001652:	4013      	ands	r3, r2
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d001      	beq.n	800165e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e09a      	b.n	8001794 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2202      	movs	r2, #2
 8001664:	4013      	ands	r3, r2
 8001666:	d015      	beq.n	8001694 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2204      	movs	r2, #4
 800166e:	4013      	ands	r3, r2
 8001670:	d006      	beq.n	8001680 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001672:	4b4b      	ldr	r3, [pc, #300]	; (80017a0 <HAL_RCC_ClockConfig+0x188>)
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	4b4a      	ldr	r3, [pc, #296]	; (80017a0 <HAL_RCC_ClockConfig+0x188>)
 8001678:	21e0      	movs	r1, #224	; 0xe0
 800167a:	00c9      	lsls	r1, r1, #3
 800167c:	430a      	orrs	r2, r1
 800167e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001680:	4b47      	ldr	r3, [pc, #284]	; (80017a0 <HAL_RCC_ClockConfig+0x188>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	22f0      	movs	r2, #240	; 0xf0
 8001686:	4393      	bics	r3, r2
 8001688:	0019      	movs	r1, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	4b44      	ldr	r3, [pc, #272]	; (80017a0 <HAL_RCC_ClockConfig+0x188>)
 8001690:	430a      	orrs	r2, r1
 8001692:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2201      	movs	r2, #1
 800169a:	4013      	ands	r3, r2
 800169c:	d040      	beq.n	8001720 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d107      	bne.n	80016b6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	4b3e      	ldr	r3, [pc, #248]	; (80017a0 <HAL_RCC_ClockConfig+0x188>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	029b      	lsls	r3, r3, #10
 80016ae:	4013      	ands	r3, r2
 80016b0:	d114      	bne.n	80016dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e06e      	b.n	8001794 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016be:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <HAL_RCC_ClockConfig+0x188>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	049b      	lsls	r3, r3, #18
 80016c6:	4013      	ands	r3, r2
 80016c8:	d108      	bne.n	80016dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e062      	b.n	8001794 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ce:	4b34      	ldr	r3, [pc, #208]	; (80017a0 <HAL_RCC_ClockConfig+0x188>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2202      	movs	r2, #2
 80016d4:	4013      	ands	r3, r2
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e05b      	b.n	8001794 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016dc:	4b30      	ldr	r3, [pc, #192]	; (80017a0 <HAL_RCC_ClockConfig+0x188>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2203      	movs	r2, #3
 80016e2:	4393      	bics	r3, r2
 80016e4:	0019      	movs	r1, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	4b2d      	ldr	r3, [pc, #180]	; (80017a0 <HAL_RCC_ClockConfig+0x188>)
 80016ec:	430a      	orrs	r2, r1
 80016ee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f0:	f7ff f9e8 	bl	8000ac4 <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f8:	e009      	b.n	800170e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016fa:	f7ff f9e3 	bl	8000ac4 <HAL_GetTick>
 80016fe:	0002      	movs	r2, r0
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	4a27      	ldr	r2, [pc, #156]	; (80017a4 <HAL_RCC_ClockConfig+0x18c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e042      	b.n	8001794 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170e:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <HAL_RCC_ClockConfig+0x188>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	220c      	movs	r2, #12
 8001714:	401a      	ands	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	429a      	cmp	r2, r3
 800171e:	d1ec      	bne.n	80016fa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <HAL_RCC_ClockConfig+0x184>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2201      	movs	r2, #1
 8001726:	4013      	ands	r3, r2
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d211      	bcs.n	8001752 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172e:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_RCC_ClockConfig+0x184>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2201      	movs	r2, #1
 8001734:	4393      	bics	r3, r2
 8001736:	0019      	movs	r1, r3
 8001738:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_RCC_ClockConfig+0x184>)
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <HAL_RCC_ClockConfig+0x184>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2201      	movs	r2, #1
 8001746:	4013      	ands	r3, r2
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d001      	beq.n	8001752 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e020      	b.n	8001794 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2204      	movs	r2, #4
 8001758:	4013      	ands	r3, r2
 800175a:	d009      	beq.n	8001770 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800175c:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_RCC_ClockConfig+0x188>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	4a11      	ldr	r2, [pc, #68]	; (80017a8 <HAL_RCC_ClockConfig+0x190>)
 8001762:	4013      	ands	r3, r2
 8001764:	0019      	movs	r1, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <HAL_RCC_ClockConfig+0x188>)
 800176c:	430a      	orrs	r2, r1
 800176e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001770:	f000 f820 	bl	80017b4 <HAL_RCC_GetSysClockFreq>
 8001774:	0001      	movs	r1, r0
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_RCC_ClockConfig+0x188>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	091b      	lsrs	r3, r3, #4
 800177c:	220f      	movs	r2, #15
 800177e:	4013      	ands	r3, r2
 8001780:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <HAL_RCC_ClockConfig+0x194>)
 8001782:	5cd3      	ldrb	r3, [r2, r3]
 8001784:	000a      	movs	r2, r1
 8001786:	40da      	lsrs	r2, r3
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_RCC_ClockConfig+0x198>)
 800178a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff f953 	bl	8000a38 <HAL_InitTick>
  
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	0018      	movs	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	b004      	add	sp, #16
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40022000 	.word	0x40022000
 80017a0:	40021000 	.word	0x40021000
 80017a4:	00001388 	.word	0x00001388
 80017a8:	fffff8ff 	.word	0xfffff8ff
 80017ac:	08002c1c 	.word	0x08002c1c
 80017b0:	20000000 	.word	0x20000000

080017b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b08f      	sub	sp, #60	; 0x3c
 80017b8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80017ba:	2314      	movs	r3, #20
 80017bc:	18fb      	adds	r3, r7, r3
 80017be:	4a2c      	ldr	r2, [pc, #176]	; (8001870 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017c2:	c313      	stmia	r3!, {r0, r1, r4}
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	4a2a      	ldr	r2, [pc, #168]	; (8001874 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017ce:	c313      	stmia	r3!, {r0, r1, r4}
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d8:	2300      	movs	r3, #0
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
 80017dc:	2300      	movs	r3, #0
 80017de:	637b      	str	r3, [r7, #52]	; 0x34
 80017e0:	2300      	movs	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80017e8:	4b23      	ldr	r3, [pc, #140]	; (8001878 <HAL_RCC_GetSysClockFreq+0xc4>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f0:	220c      	movs	r2, #12
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	d002      	beq.n	80017fe <HAL_RCC_GetSysClockFreq+0x4a>
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d003      	beq.n	8001804 <HAL_RCC_GetSysClockFreq+0x50>
 80017fc:	e02f      	b.n	800185e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017fe:	4b1f      	ldr	r3, [pc, #124]	; (800187c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001802:	e02f      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001806:	0c9b      	lsrs	r3, r3, #18
 8001808:	220f      	movs	r2, #15
 800180a:	4013      	ands	r3, r2
 800180c:	2214      	movs	r2, #20
 800180e:	18ba      	adds	r2, r7, r2
 8001810:	5cd3      	ldrb	r3, [r2, r3]
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001814:	4b18      	ldr	r3, [pc, #96]	; (8001878 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	220f      	movs	r2, #15
 800181a:	4013      	ands	r3, r2
 800181c:	1d3a      	adds	r2, r7, #4
 800181e:	5cd3      	ldrb	r3, [r2, r3]
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001824:	23c0      	movs	r3, #192	; 0xc0
 8001826:	025b      	lsls	r3, r3, #9
 8001828:	401a      	ands	r2, r3
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	025b      	lsls	r3, r3, #9
 800182e:	429a      	cmp	r2, r3
 8001830:	d109      	bne.n	8001846 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001832:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001834:	4811      	ldr	r0, [pc, #68]	; (800187c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001836:	f7fe fc71 	bl	800011c <__udivsi3>
 800183a:	0003      	movs	r3, r0
 800183c:	001a      	movs	r2, r3
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	4353      	muls	r3, r2
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
 8001844:	e008      	b.n	8001858 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001848:	480c      	ldr	r0, [pc, #48]	; (800187c <HAL_RCC_GetSysClockFreq+0xc8>)
 800184a:	f7fe fc67 	bl	800011c <__udivsi3>
 800184e:	0003      	movs	r3, r0
 8001850:	001a      	movs	r2, r3
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	4353      	muls	r3, r2
 8001856:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800185c:	e002      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001862:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001866:	0018      	movs	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	b00f      	add	sp, #60	; 0x3c
 800186c:	bd90      	pop	{r4, r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	08002bfc 	.word	0x08002bfc
 8001874:	08002c0c 	.word	0x08002c0c
 8001878:	40021000 	.word	0x40021000
 800187c:	007a1200 	.word	0x007a1200

08001880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001884:	4b02      	ldr	r3, [pc, #8]	; (8001890 <HAL_RCC_GetHCLKFreq+0x10>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	0018      	movs	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	20000000 	.word	0x20000000

08001894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001898:	f7ff fff2 	bl	8001880 <HAL_RCC_GetHCLKFreq>
 800189c:	0001      	movs	r1, r0
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	2207      	movs	r2, #7
 80018a6:	4013      	ands	r3, r2
 80018a8:	4a04      	ldr	r2, [pc, #16]	; (80018bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80018aa:	5cd3      	ldrb	r3, [r2, r3]
 80018ac:	40d9      	lsrs	r1, r3
 80018ae:	000b      	movs	r3, r1
}    
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	40021000 	.word	0x40021000
 80018bc:	08002c2c 	.word	0x08002c2c

080018c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e042      	b.n	8001958 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	223d      	movs	r2, #61	; 0x3d
 80018d6:	5c9b      	ldrb	r3, [r3, r2]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d107      	bne.n	80018ee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	223c      	movs	r2, #60	; 0x3c
 80018e2:	2100      	movs	r1, #0
 80018e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	0018      	movs	r0, r3
 80018ea:	f7fe ffa9 	bl	8000840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	223d      	movs	r2, #61	; 0x3d
 80018f2:	2102      	movs	r1, #2
 80018f4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3304      	adds	r3, #4
 80018fe:	0019      	movs	r1, r3
 8001900:	0010      	movs	r0, r2
 8001902:	f000 f871 	bl	80019e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2246      	movs	r2, #70	; 0x46
 800190a:	2101      	movs	r1, #1
 800190c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	223e      	movs	r2, #62	; 0x3e
 8001912:	2101      	movs	r1, #1
 8001914:	5499      	strb	r1, [r3, r2]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	223f      	movs	r2, #63	; 0x3f
 800191a:	2101      	movs	r1, #1
 800191c:	5499      	strb	r1, [r3, r2]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2240      	movs	r2, #64	; 0x40
 8001922:	2101      	movs	r1, #1
 8001924:	5499      	strb	r1, [r3, r2]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2241      	movs	r2, #65	; 0x41
 800192a:	2101      	movs	r1, #1
 800192c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2242      	movs	r2, #66	; 0x42
 8001932:	2101      	movs	r1, #1
 8001934:	5499      	strb	r1, [r3, r2]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2243      	movs	r2, #67	; 0x43
 800193a:	2101      	movs	r1, #1
 800193c:	5499      	strb	r1, [r3, r2]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2244      	movs	r2, #68	; 0x44
 8001942:	2101      	movs	r1, #1
 8001944:	5499      	strb	r1, [r3, r2]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2245      	movs	r2, #69	; 0x45
 800194a:	2101      	movs	r1, #1
 800194c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	223d      	movs	r2, #61	; 0x3d
 8001952:	2101      	movs	r1, #1
 8001954:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	0018      	movs	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	b002      	add	sp, #8
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	223d      	movs	r2, #61	; 0x3d
 800196c:	5c9b      	ldrb	r3, [r3, r2]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b01      	cmp	r3, #1
 8001972:	d001      	beq.n	8001978 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e02d      	b.n	80019d4 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	223d      	movs	r2, #61	; 0x3d
 800197c:	2102      	movs	r1, #2
 800197e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a15      	ldr	r2, [pc, #84]	; (80019dc <HAL_TIM_Base_Start+0x7c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d009      	beq.n	800199e <HAL_TIM_Base_Start+0x3e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <HAL_TIM_Base_Start+0x80>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d004      	beq.n	800199e <HAL_TIM_Base_Start+0x3e>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <HAL_TIM_Base_Start+0x84>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d111      	bne.n	80019c2 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2207      	movs	r2, #7
 80019a6:	4013      	ands	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b06      	cmp	r3, #6
 80019ae:	d010      	beq.n	80019d2 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2101      	movs	r1, #1
 80019bc:	430a      	orrs	r2, r1
 80019be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019c0:	e007      	b.n	80019d2 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2101      	movs	r1, #1
 80019ce:	430a      	orrs	r2, r1
 80019d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	0018      	movs	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b004      	add	sp, #16
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40012c00 	.word	0x40012c00
 80019e0:	40000400 	.word	0x40000400
 80019e4:	40014000 	.word	0x40014000

080019e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a2f      	ldr	r2, [pc, #188]	; (8001ab8 <TIM_Base_SetConfig+0xd0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d003      	beq.n	8001a08 <TIM_Base_SetConfig+0x20>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a2e      	ldr	r2, [pc, #184]	; (8001abc <TIM_Base_SetConfig+0xd4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d108      	bne.n	8001a1a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2270      	movs	r2, #112	; 0x70
 8001a0c:	4393      	bics	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a26      	ldr	r2, [pc, #152]	; (8001ab8 <TIM_Base_SetConfig+0xd0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d013      	beq.n	8001a4a <TIM_Base_SetConfig+0x62>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a25      	ldr	r2, [pc, #148]	; (8001abc <TIM_Base_SetConfig+0xd4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d00f      	beq.n	8001a4a <TIM_Base_SetConfig+0x62>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a24      	ldr	r2, [pc, #144]	; (8001ac0 <TIM_Base_SetConfig+0xd8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d00b      	beq.n	8001a4a <TIM_Base_SetConfig+0x62>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a23      	ldr	r2, [pc, #140]	; (8001ac4 <TIM_Base_SetConfig+0xdc>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d007      	beq.n	8001a4a <TIM_Base_SetConfig+0x62>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <TIM_Base_SetConfig+0xe0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d003      	beq.n	8001a4a <TIM_Base_SetConfig+0x62>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a21      	ldr	r2, [pc, #132]	; (8001acc <TIM_Base_SetConfig+0xe4>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d108      	bne.n	8001a5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4a20      	ldr	r2, [pc, #128]	; (8001ad0 <TIM_Base_SetConfig+0xe8>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2280      	movs	r2, #128	; 0x80
 8001a60:	4393      	bics	r3, r2
 8001a62:	001a      	movs	r2, r3
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a0c      	ldr	r2, [pc, #48]	; (8001ab8 <TIM_Base_SetConfig+0xd0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d00b      	beq.n	8001aa2 <TIM_Base_SetConfig+0xba>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <TIM_Base_SetConfig+0xdc>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d007      	beq.n	8001aa2 <TIM_Base_SetConfig+0xba>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a0c      	ldr	r2, [pc, #48]	; (8001ac8 <TIM_Base_SetConfig+0xe0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d003      	beq.n	8001aa2 <TIM_Base_SetConfig+0xba>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <TIM_Base_SetConfig+0xe4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d103      	bne.n	8001aaa <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	615a      	str	r2, [r3, #20]
}
 8001ab0:	46c0      	nop			; (mov r8, r8)
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b004      	add	sp, #16
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40012c00 	.word	0x40012c00
 8001abc:	40000400 	.word	0x40000400
 8001ac0:	40002000 	.word	0x40002000
 8001ac4:	40014000 	.word	0x40014000
 8001ac8:	40014400 	.word	0x40014400
 8001acc:	40014800 	.word	0x40014800
 8001ad0:	fffffcff 	.word	0xfffffcff

08001ad4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e044      	b.n	8001b70 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d107      	bne.n	8001afe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2274      	movs	r2, #116	; 0x74
 8001af2:	2100      	movs	r1, #0
 8001af4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	0018      	movs	r0, r3
 8001afa:	f7fe febf 	bl	800087c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2224      	movs	r2, #36	; 0x24
 8001b02:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2101      	movs	r1, #1
 8001b10:	438a      	bics	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	0018      	movs	r0, r3
 8001b18:	f000 f8da 	bl	8001cd0 <UART_SetConfig>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e024      	b.n	8001b70 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	0018      	movs	r0, r3
 8001b32:	f000 fa25 	bl	8001f80 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	490d      	ldr	r1, [pc, #52]	; (8001b78 <HAL_UART_Init+0xa4>)
 8001b42:	400a      	ands	r2, r1
 8001b44:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2108      	movs	r1, #8
 8001b52:	438a      	bics	r2, r1
 8001b54:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2101      	movs	r1, #1
 8001b62:	430a      	orrs	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f000 fabd 	bl	80020e8 <UART_CheckIdleState>
 8001b6e:	0003      	movs	r3, r0
}
 8001b70:	0018      	movs	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b002      	add	sp, #8
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	fffff7ff 	.word	0xfffff7ff

08001b7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	1dbb      	adds	r3, r7, #6
 8001b8a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b90:	2b20      	cmp	r3, #32
 8001b92:	d000      	beq.n	8001b96 <HAL_UART_Transmit+0x1a>
 8001b94:	e096      	b.n	8001cc4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_UART_Transmit+0x28>
 8001b9c:	1dbb      	adds	r3, r7, #6
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e08e      	b.n	8001cc6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	015b      	lsls	r3, r3, #5
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d109      	bne.n	8001bc8 <HAL_UART_Transmit+0x4c>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d105      	bne.n	8001bc8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d001      	beq.n	8001bc8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e07e      	b.n	8001cc6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2274      	movs	r2, #116	; 0x74
 8001bcc:	5c9b      	ldrb	r3, [r3, r2]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_UART_Transmit+0x5a>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e077      	b.n	8001cc6 <HAL_UART_Transmit+0x14a>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2274      	movs	r2, #116	; 0x74
 8001bda:	2101      	movs	r1, #1
 8001bdc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2280      	movs	r2, #128	; 0x80
 8001be2:	2100      	movs	r1, #0
 8001be4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2221      	movs	r2, #33	; 0x21
 8001bea:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bec:	f7fe ff6a 	bl	8000ac4 <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1dba      	adds	r2, r7, #6
 8001bf8:	2150      	movs	r1, #80	; 0x50
 8001bfa:	8812      	ldrh	r2, [r2, #0]
 8001bfc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	1dba      	adds	r2, r7, #6
 8001c02:	2152      	movs	r1, #82	; 0x52
 8001c04:	8812      	ldrh	r2, [r2, #0]
 8001c06:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	015b      	lsls	r3, r3, #5
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d108      	bne.n	8001c26 <HAL_UART_Transmit+0xaa>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d104      	bne.n	8001c26 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	61bb      	str	r3, [r7, #24]
 8001c24:	e003      	b.n	8001c2e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2274      	movs	r2, #116	; 0x74
 8001c32:	2100      	movs	r1, #0
 8001c34:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001c36:	e02d      	b.n	8001c94 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	0013      	movs	r3, r2
 8001c42:	2200      	movs	r2, #0
 8001c44:	2180      	movs	r1, #128	; 0x80
 8001c46:	f000 fa97 	bl	8002178 <UART_WaitOnFlagUntilTimeout>
 8001c4a:	1e03      	subs	r3, r0, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e039      	b.n	8001cc6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10b      	bne.n	8001c70 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	881a      	ldrh	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	05d2      	lsls	r2, r2, #23
 8001c62:	0dd2      	lsrs	r2, r2, #23
 8001c64:	b292      	uxth	r2, r2
 8001c66:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	e008      	b.n	8001c82 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	781a      	ldrb	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	b292      	uxth	r2, r2
 8001c7a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2252      	movs	r2, #82	; 0x52
 8001c86:	5a9b      	ldrh	r3, [r3, r2]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b299      	uxth	r1, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2252      	movs	r2, #82	; 0x52
 8001c92:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2252      	movs	r2, #82	; 0x52
 8001c98:	5a9b      	ldrh	r3, [r3, r2]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1cb      	bne.n	8001c38 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	0013      	movs	r3, r2
 8001caa:	2200      	movs	r2, #0
 8001cac:	2140      	movs	r1, #64	; 0x40
 8001cae:	f000 fa63 	bl	8002178 <UART_WaitOnFlagUntilTimeout>
 8001cb2:	1e03      	subs	r3, r0, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e005      	b.n	8001cc6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	e000      	b.n	8001cc6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001cc4:	2302      	movs	r3, #2
  }
}
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b008      	add	sp, #32
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001cd8:	231e      	movs	r3, #30
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a97      	ldr	r2, [pc, #604]	; (8001f5c <UART_SetConfig+0x28c>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	0019      	movs	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	4a92      	ldr	r2, [pc, #584]	; (8001f60 <UART_SetConfig+0x290>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	0019      	movs	r1, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4a89      	ldr	r2, [pc, #548]	; (8001f64 <UART_SetConfig+0x294>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	0019      	movs	r1, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a85      	ldr	r2, [pc, #532]	; (8001f68 <UART_SetConfig+0x298>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d127      	bne.n	8001da6 <UART_SetConfig+0xd6>
 8001d56:	4b85      	ldr	r3, [pc, #532]	; (8001f6c <UART_SetConfig+0x29c>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d00d      	beq.n	8001d7e <UART_SetConfig+0xae>
 8001d62:	d81b      	bhi.n	8001d9c <UART_SetConfig+0xcc>
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d014      	beq.n	8001d92 <UART_SetConfig+0xc2>
 8001d68:	d818      	bhi.n	8001d9c <UART_SetConfig+0xcc>
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <UART_SetConfig+0xa4>
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d00a      	beq.n	8001d88 <UART_SetConfig+0xb8>
 8001d72:	e013      	b.n	8001d9c <UART_SetConfig+0xcc>
 8001d74:	231f      	movs	r3, #31
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
 8001d7c:	e035      	b.n	8001dea <UART_SetConfig+0x11a>
 8001d7e:	231f      	movs	r3, #31
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	2202      	movs	r2, #2
 8001d84:	701a      	strb	r2, [r3, #0]
 8001d86:	e030      	b.n	8001dea <UART_SetConfig+0x11a>
 8001d88:	231f      	movs	r3, #31
 8001d8a:	18fb      	adds	r3, r7, r3
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	701a      	strb	r2, [r3, #0]
 8001d90:	e02b      	b.n	8001dea <UART_SetConfig+0x11a>
 8001d92:	231f      	movs	r3, #31
 8001d94:	18fb      	adds	r3, r7, r3
 8001d96:	2208      	movs	r2, #8
 8001d98:	701a      	strb	r2, [r3, #0]
 8001d9a:	e026      	b.n	8001dea <UART_SetConfig+0x11a>
 8001d9c:	231f      	movs	r3, #31
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	2210      	movs	r2, #16
 8001da2:	701a      	strb	r2, [r3, #0]
 8001da4:	e021      	b.n	8001dea <UART_SetConfig+0x11a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a71      	ldr	r2, [pc, #452]	; (8001f70 <UART_SetConfig+0x2a0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d104      	bne.n	8001dba <UART_SetConfig+0xea>
 8001db0:	231f      	movs	r3, #31
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
 8001db8:	e017      	b.n	8001dea <UART_SetConfig+0x11a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a6d      	ldr	r2, [pc, #436]	; (8001f74 <UART_SetConfig+0x2a4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d104      	bne.n	8001dce <UART_SetConfig+0xfe>
 8001dc4:	231f      	movs	r3, #31
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
 8001dcc:	e00d      	b.n	8001dea <UART_SetConfig+0x11a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a69      	ldr	r2, [pc, #420]	; (8001f78 <UART_SetConfig+0x2a8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d104      	bne.n	8001de2 <UART_SetConfig+0x112>
 8001dd8:	231f      	movs	r3, #31
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
 8001de0:	e003      	b.n	8001dea <UART_SetConfig+0x11a>
 8001de2:	231f      	movs	r3, #31
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	2210      	movs	r2, #16
 8001de8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69da      	ldr	r2, [r3, #28]
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d15d      	bne.n	8001eb2 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8001df6:	231f      	movs	r3, #31
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d015      	beq.n	8001e2c <UART_SetConfig+0x15c>
 8001e00:	dc18      	bgt.n	8001e34 <UART_SetConfig+0x164>
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d00d      	beq.n	8001e22 <UART_SetConfig+0x152>
 8001e06:	dc15      	bgt.n	8001e34 <UART_SetConfig+0x164>
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <UART_SetConfig+0x142>
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d005      	beq.n	8001e1c <UART_SetConfig+0x14c>
 8001e10:	e010      	b.n	8001e34 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e12:	f7ff fd3f 	bl	8001894 <HAL_RCC_GetPCLK1Freq>
 8001e16:	0003      	movs	r3, r0
 8001e18:	61bb      	str	r3, [r7, #24]
        break;
 8001e1a:	e012      	b.n	8001e42 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e1c:	4b57      	ldr	r3, [pc, #348]	; (8001f7c <UART_SetConfig+0x2ac>)
 8001e1e:	61bb      	str	r3, [r7, #24]
        break;
 8001e20:	e00f      	b.n	8001e42 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e22:	f7ff fcc7 	bl	80017b4 <HAL_RCC_GetSysClockFreq>
 8001e26:	0003      	movs	r3, r0
 8001e28:	61bb      	str	r3, [r7, #24]
        break;
 8001e2a:	e00a      	b.n	8001e42 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	61bb      	str	r3, [r7, #24]
        break;
 8001e32:	e006      	b.n	8001e42 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001e38:	231e      	movs	r3, #30
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]
        break;
 8001e40:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d100      	bne.n	8001e4a <UART_SetConfig+0x17a>
 8001e48:	e07b      	b.n	8001f42 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	005a      	lsls	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	18d2      	adds	r2, r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	0010      	movs	r0, r2
 8001e5e:	f7fe f95d 	bl	800011c <__udivsi3>
 8001e62:	0003      	movs	r3, r0
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	2b0f      	cmp	r3, #15
 8001e6c:	d91c      	bls.n	8001ea8 <UART_SetConfig+0x1d8>
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	025b      	lsls	r3, r3, #9
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d217      	bcs.n	8001ea8 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	200e      	movs	r0, #14
 8001e7e:	183b      	adds	r3, r7, r0
 8001e80:	210f      	movs	r1, #15
 8001e82:	438a      	bics	r2, r1
 8001e84:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	085b      	lsrs	r3, r3, #1
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	4013      	ands	r3, r2
 8001e90:	b299      	uxth	r1, r3
 8001e92:	183b      	adds	r3, r7, r0
 8001e94:	183a      	adds	r2, r7, r0
 8001e96:	8812      	ldrh	r2, [r2, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	183a      	adds	r2, r7, r0
 8001ea2:	8812      	ldrh	r2, [r2, #0]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	e04c      	b.n	8001f42 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8001ea8:	231e      	movs	r3, #30
 8001eaa:	18fb      	adds	r3, r7, r3
 8001eac:	2201      	movs	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]
 8001eb0:	e047      	b.n	8001f42 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001eb2:	231f      	movs	r3, #31
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d015      	beq.n	8001ee8 <UART_SetConfig+0x218>
 8001ebc:	dc18      	bgt.n	8001ef0 <UART_SetConfig+0x220>
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d00d      	beq.n	8001ede <UART_SetConfig+0x20e>
 8001ec2:	dc15      	bgt.n	8001ef0 <UART_SetConfig+0x220>
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <UART_SetConfig+0x1fe>
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d005      	beq.n	8001ed8 <UART_SetConfig+0x208>
 8001ecc:	e010      	b.n	8001ef0 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ece:	f7ff fce1 	bl	8001894 <HAL_RCC_GetPCLK1Freq>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	61bb      	str	r3, [r7, #24]
        break;
 8001ed6:	e012      	b.n	8001efe <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ed8:	4b28      	ldr	r3, [pc, #160]	; (8001f7c <UART_SetConfig+0x2ac>)
 8001eda:	61bb      	str	r3, [r7, #24]
        break;
 8001edc:	e00f      	b.n	8001efe <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ede:	f7ff fc69 	bl	80017b4 <HAL_RCC_GetSysClockFreq>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	61bb      	str	r3, [r7, #24]
        break;
 8001ee6:	e00a      	b.n	8001efe <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	021b      	lsls	r3, r3, #8
 8001eec:	61bb      	str	r3, [r7, #24]
        break;
 8001eee:	e006      	b.n	8001efe <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001ef4:	231e      	movs	r3, #30
 8001ef6:	18fb      	adds	r3, r7, r3
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
        break;
 8001efc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01e      	beq.n	8001f42 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	085a      	lsrs	r2, r3, #1
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	18d2      	adds	r2, r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	0019      	movs	r1, r3
 8001f14:	0010      	movs	r0, r2
 8001f16:	f7fe f901 	bl	800011c <__udivsi3>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	2b0f      	cmp	r3, #15
 8001f24:	d909      	bls.n	8001f3a <UART_SetConfig+0x26a>
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	025b      	lsls	r3, r3, #9
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d204      	bcs.n	8001f3a <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	60da      	str	r2, [r3, #12]
 8001f38:	e003      	b.n	8001f42 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8001f3a:	231e      	movs	r3, #30
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001f4e:	231e      	movs	r3, #30
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	781b      	ldrb	r3, [r3, #0]
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b008      	add	sp, #32
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	efff69f3 	.word	0xefff69f3
 8001f60:	ffffcfff 	.word	0xffffcfff
 8001f64:	fffff4ff 	.word	0xfffff4ff
 8001f68:	40013800 	.word	0x40013800
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40004400 	.word	0x40004400
 8001f74:	40004800 	.word	0x40004800
 8001f78:	40004c00 	.word	0x40004c00
 8001f7c:	007a1200 	.word	0x007a1200

08001f80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d00b      	beq.n	8001faa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4a4a      	ldr	r2, [pc, #296]	; (80020c4 <UART_AdvFeatureConfig+0x144>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	2202      	movs	r2, #2
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d00b      	beq.n	8001fcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4a43      	ldr	r2, [pc, #268]	; (80020c8 <UART_AdvFeatureConfig+0x148>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	0019      	movs	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d00b      	beq.n	8001fee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a3b      	ldr	r2, [pc, #236]	; (80020cc <UART_AdvFeatureConfig+0x14c>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d00b      	beq.n	8002010 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4a34      	ldr	r2, [pc, #208]	; (80020d0 <UART_AdvFeatureConfig+0x150>)
 8002000:	4013      	ands	r3, r2
 8002002:	0019      	movs	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	2210      	movs	r2, #16
 8002016:	4013      	ands	r3, r2
 8002018:	d00b      	beq.n	8002032 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4a2c      	ldr	r2, [pc, #176]	; (80020d4 <UART_AdvFeatureConfig+0x154>)
 8002022:	4013      	ands	r3, r2
 8002024:	0019      	movs	r1, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	2220      	movs	r2, #32
 8002038:	4013      	ands	r3, r2
 800203a:	d00b      	beq.n	8002054 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	4a25      	ldr	r2, [pc, #148]	; (80020d8 <UART_AdvFeatureConfig+0x158>)
 8002044:	4013      	ands	r3, r2
 8002046:	0019      	movs	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	2240      	movs	r2, #64	; 0x40
 800205a:	4013      	ands	r3, r2
 800205c:	d01d      	beq.n	800209a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a1d      	ldr	r2, [pc, #116]	; (80020dc <UART_AdvFeatureConfig+0x15c>)
 8002066:	4013      	ands	r3, r2
 8002068:	0019      	movs	r1, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	035b      	lsls	r3, r3, #13
 800207e:	429a      	cmp	r2, r3
 8002080:	d10b      	bne.n	800209a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4a15      	ldr	r2, [pc, #84]	; (80020e0 <UART_AdvFeatureConfig+0x160>)
 800208a:	4013      	ands	r3, r2
 800208c:	0019      	movs	r1, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	2280      	movs	r2, #128	; 0x80
 80020a0:	4013      	ands	r3, r2
 80020a2:	d00b      	beq.n	80020bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4a0e      	ldr	r2, [pc, #56]	; (80020e4 <UART_AdvFeatureConfig+0x164>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	0019      	movs	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	605a      	str	r2, [r3, #4]
  }
}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b002      	add	sp, #8
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	fffdffff 	.word	0xfffdffff
 80020c8:	fffeffff 	.word	0xfffeffff
 80020cc:	fffbffff 	.word	0xfffbffff
 80020d0:	ffff7fff 	.word	0xffff7fff
 80020d4:	ffffefff 	.word	0xffffefff
 80020d8:	ffffdfff 	.word	0xffffdfff
 80020dc:	ffefffff 	.word	0xffefffff
 80020e0:	ff9fffff 	.word	0xff9fffff
 80020e4:	fff7ffff 	.word	0xfff7ffff

080020e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2280      	movs	r2, #128	; 0x80
 80020f4:	2100      	movs	r1, #0
 80020f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80020f8:	f7fe fce4 	bl	8000ac4 <HAL_GetTick>
 80020fc:	0003      	movs	r3, r0
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2208      	movs	r2, #8
 8002108:	4013      	ands	r3, r2
 800210a:	2b08      	cmp	r3, #8
 800210c:	d10c      	bne.n	8002128 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2280      	movs	r2, #128	; 0x80
 8002112:	0391      	lsls	r1, r2, #14
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	4a17      	ldr	r2, [pc, #92]	; (8002174 <UART_CheckIdleState+0x8c>)
 8002118:	9200      	str	r2, [sp, #0]
 800211a:	2200      	movs	r2, #0
 800211c:	f000 f82c 	bl	8002178 <UART_WaitOnFlagUntilTimeout>
 8002120:	1e03      	subs	r3, r0, #0
 8002122:	d001      	beq.n	8002128 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e021      	b.n	800216c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2204      	movs	r2, #4
 8002130:	4013      	ands	r3, r2
 8002132:	2b04      	cmp	r3, #4
 8002134:	d10c      	bne.n	8002150 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2280      	movs	r2, #128	; 0x80
 800213a:	03d1      	lsls	r1, r2, #15
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	4a0d      	ldr	r2, [pc, #52]	; (8002174 <UART_CheckIdleState+0x8c>)
 8002140:	9200      	str	r2, [sp, #0]
 8002142:	2200      	movs	r2, #0
 8002144:	f000 f818 	bl	8002178 <UART_WaitOnFlagUntilTimeout>
 8002148:	1e03      	subs	r3, r0, #0
 800214a:	d001      	beq.n	8002150 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e00d      	b.n	800216c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2220      	movs	r2, #32
 8002154:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2220      	movs	r2, #32
 800215a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2274      	movs	r2, #116	; 0x74
 8002166:	2100      	movs	r1, #0
 8002168:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	b004      	add	sp, #16
 8002172:	bd80      	pop	{r7, pc}
 8002174:	01ffffff 	.word	0x01ffffff

08002178 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b094      	sub	sp, #80	; 0x50
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	1dfb      	adds	r3, r7, #7
 8002186:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002188:	e0a3      	b.n	80022d2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800218a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800218c:	3301      	adds	r3, #1
 800218e:	d100      	bne.n	8002192 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002190:	e09f      	b.n	80022d2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002192:	f7fe fc97 	bl	8000ac4 <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800219e:	429a      	cmp	r2, r3
 80021a0:	d302      	bcc.n	80021a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80021a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d13d      	bne.n	8002224 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021a8:	f3ef 8310 	mrs	r3, PRIMASK
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80021ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021b0:	647b      	str	r3, [r7, #68]	; 0x44
 80021b2:	2301      	movs	r3, #1
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b8:	f383 8810 	msr	PRIMASK, r3
}
 80021bc:	46c0      	nop			; (mov r8, r8)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	494c      	ldr	r1, [pc, #304]	; (80022fc <UART_WaitOnFlagUntilTimeout+0x184>)
 80021ca:	400a      	ands	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021d0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d4:	f383 8810 	msr	PRIMASK, r3
}
 80021d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021da:	f3ef 8310 	mrs	r3, PRIMASK
 80021de:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80021e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021e2:	643b      	str	r3, [r7, #64]	; 0x40
 80021e4:	2301      	movs	r3, #1
 80021e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ea:	f383 8810 	msr	PRIMASK, r3
}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2101      	movs	r1, #1
 80021fc:	438a      	bics	r2, r1
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002202:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002206:	f383 8810 	msr	PRIMASK, r3
}
 800220a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2220      	movs	r2, #32
 8002216:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2274      	movs	r2, #116	; 0x74
 800221c:	2100      	movs	r1, #0
 800221e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e067      	b.n	80022f4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2204      	movs	r2, #4
 800222c:	4013      	ands	r3, r2
 800222e:	d050      	beq.n	80022d2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	69da      	ldr	r2, [r3, #28]
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	401a      	ands	r2, r3
 800223c:	2380      	movs	r3, #128	; 0x80
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	429a      	cmp	r2, r3
 8002242:	d146      	bne.n	80022d2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2280      	movs	r2, #128	; 0x80
 800224a:	0112      	lsls	r2, r2, #4
 800224c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800224e:	f3ef 8310 	mrs	r3, PRIMASK
 8002252:	613b      	str	r3, [r7, #16]
  return(result);
 8002254:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002258:	2301      	movs	r3, #1
 800225a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f383 8810 	msr	PRIMASK, r3
}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4923      	ldr	r1, [pc, #140]	; (80022fc <UART_WaitOnFlagUntilTimeout+0x184>)
 8002270:	400a      	ands	r2, r1
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002276:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f383 8810 	msr	PRIMASK, r3
}
 800227e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002280:	f3ef 8310 	mrs	r3, PRIMASK
 8002284:	61fb      	str	r3, [r7, #28]
  return(result);
 8002286:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002288:	64bb      	str	r3, [r7, #72]	; 0x48
 800228a:	2301      	movs	r3, #1
 800228c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	f383 8810 	msr	PRIMASK, r3
}
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2101      	movs	r1, #1
 80022a2:	438a      	bics	r2, r1
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	f383 8810 	msr	PRIMASK, r3
}
 80022b0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2220      	movs	r2, #32
 80022b6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2220      	movs	r2, #32
 80022bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2280      	movs	r2, #128	; 0x80
 80022c2:	2120      	movs	r1, #32
 80022c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2274      	movs	r2, #116	; 0x74
 80022ca:	2100      	movs	r1, #0
 80022cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e010      	b.n	80022f4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	4013      	ands	r3, r2
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	425a      	negs	r2, r3
 80022e2:	4153      	adcs	r3, r2
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	001a      	movs	r2, r3
 80022e8:	1dfb      	adds	r3, r7, #7
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d100      	bne.n	80022f2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80022f0:	e74b      	b.n	800218a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	0018      	movs	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b014      	add	sp, #80	; 0x50
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	fffffe5f 	.word	0xfffffe5f

08002300 <__errno>:
 8002300:	4b01      	ldr	r3, [pc, #4]	; (8002308 <__errno+0x8>)
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	4770      	bx	lr
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	2000000c 	.word	0x2000000c

0800230c <__libc_init_array>:
 800230c:	b570      	push	{r4, r5, r6, lr}
 800230e:	2600      	movs	r6, #0
 8002310:	4d0c      	ldr	r5, [pc, #48]	; (8002344 <__libc_init_array+0x38>)
 8002312:	4c0d      	ldr	r4, [pc, #52]	; (8002348 <__libc_init_array+0x3c>)
 8002314:	1b64      	subs	r4, r4, r5
 8002316:	10a4      	asrs	r4, r4, #2
 8002318:	42a6      	cmp	r6, r4
 800231a:	d109      	bne.n	8002330 <__libc_init_array+0x24>
 800231c:	2600      	movs	r6, #0
 800231e:	f000 fc47 	bl	8002bb0 <_init>
 8002322:	4d0a      	ldr	r5, [pc, #40]	; (800234c <__libc_init_array+0x40>)
 8002324:	4c0a      	ldr	r4, [pc, #40]	; (8002350 <__libc_init_array+0x44>)
 8002326:	1b64      	subs	r4, r4, r5
 8002328:	10a4      	asrs	r4, r4, #2
 800232a:	42a6      	cmp	r6, r4
 800232c:	d105      	bne.n	800233a <__libc_init_array+0x2e>
 800232e:	bd70      	pop	{r4, r5, r6, pc}
 8002330:	00b3      	lsls	r3, r6, #2
 8002332:	58eb      	ldr	r3, [r5, r3]
 8002334:	4798      	blx	r3
 8002336:	3601      	adds	r6, #1
 8002338:	e7ee      	b.n	8002318 <__libc_init_array+0xc>
 800233a:	00b3      	lsls	r3, r6, #2
 800233c:	58eb      	ldr	r3, [r5, r3]
 800233e:	4798      	blx	r3
 8002340:	3601      	adds	r6, #1
 8002342:	e7f2      	b.n	800232a <__libc_init_array+0x1e>
 8002344:	08002c68 	.word	0x08002c68
 8002348:	08002c68 	.word	0x08002c68
 800234c:	08002c68 	.word	0x08002c68
 8002350:	08002c6c 	.word	0x08002c6c

08002354 <memset>:
 8002354:	0003      	movs	r3, r0
 8002356:	1882      	adds	r2, r0, r2
 8002358:	4293      	cmp	r3, r2
 800235a:	d100      	bne.n	800235e <memset+0xa>
 800235c:	4770      	bx	lr
 800235e:	7019      	strb	r1, [r3, #0]
 8002360:	3301      	adds	r3, #1
 8002362:	e7f9      	b.n	8002358 <memset+0x4>

08002364 <siprintf>:
 8002364:	b40e      	push	{r1, r2, r3}
 8002366:	b500      	push	{lr}
 8002368:	490b      	ldr	r1, [pc, #44]	; (8002398 <siprintf+0x34>)
 800236a:	b09c      	sub	sp, #112	; 0x70
 800236c:	ab1d      	add	r3, sp, #116	; 0x74
 800236e:	9002      	str	r0, [sp, #8]
 8002370:	9006      	str	r0, [sp, #24]
 8002372:	9107      	str	r1, [sp, #28]
 8002374:	9104      	str	r1, [sp, #16]
 8002376:	4809      	ldr	r0, [pc, #36]	; (800239c <siprintf+0x38>)
 8002378:	4909      	ldr	r1, [pc, #36]	; (80023a0 <siprintf+0x3c>)
 800237a:	cb04      	ldmia	r3!, {r2}
 800237c:	9105      	str	r1, [sp, #20]
 800237e:	6800      	ldr	r0, [r0, #0]
 8002380:	a902      	add	r1, sp, #8
 8002382:	9301      	str	r3, [sp, #4]
 8002384:	f000 f870 	bl	8002468 <_svfiprintf_r>
 8002388:	2300      	movs	r3, #0
 800238a:	9a02      	ldr	r2, [sp, #8]
 800238c:	7013      	strb	r3, [r2, #0]
 800238e:	b01c      	add	sp, #112	; 0x70
 8002390:	bc08      	pop	{r3}
 8002392:	b003      	add	sp, #12
 8002394:	4718      	bx	r3
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	7fffffff 	.word	0x7fffffff
 800239c:	2000000c 	.word	0x2000000c
 80023a0:	ffff0208 	.word	0xffff0208

080023a4 <__ssputs_r>:
 80023a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a6:	688e      	ldr	r6, [r1, #8]
 80023a8:	b085      	sub	sp, #20
 80023aa:	0007      	movs	r7, r0
 80023ac:	000c      	movs	r4, r1
 80023ae:	9203      	str	r2, [sp, #12]
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	429e      	cmp	r6, r3
 80023b4:	d83c      	bhi.n	8002430 <__ssputs_r+0x8c>
 80023b6:	2390      	movs	r3, #144	; 0x90
 80023b8:	898a      	ldrh	r2, [r1, #12]
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	421a      	tst	r2, r3
 80023be:	d034      	beq.n	800242a <__ssputs_r+0x86>
 80023c0:	2503      	movs	r5, #3
 80023c2:	6909      	ldr	r1, [r1, #16]
 80023c4:	6823      	ldr	r3, [r4, #0]
 80023c6:	1a5b      	subs	r3, r3, r1
 80023c8:	9302      	str	r3, [sp, #8]
 80023ca:	6963      	ldr	r3, [r4, #20]
 80023cc:	9802      	ldr	r0, [sp, #8]
 80023ce:	435d      	muls	r5, r3
 80023d0:	0feb      	lsrs	r3, r5, #31
 80023d2:	195d      	adds	r5, r3, r5
 80023d4:	9b01      	ldr	r3, [sp, #4]
 80023d6:	106d      	asrs	r5, r5, #1
 80023d8:	3301      	adds	r3, #1
 80023da:	181b      	adds	r3, r3, r0
 80023dc:	42ab      	cmp	r3, r5
 80023de:	d900      	bls.n	80023e2 <__ssputs_r+0x3e>
 80023e0:	001d      	movs	r5, r3
 80023e2:	0553      	lsls	r3, r2, #21
 80023e4:	d532      	bpl.n	800244c <__ssputs_r+0xa8>
 80023e6:	0029      	movs	r1, r5
 80023e8:	0038      	movs	r0, r7
 80023ea:	f000 fb31 	bl	8002a50 <_malloc_r>
 80023ee:	1e06      	subs	r6, r0, #0
 80023f0:	d109      	bne.n	8002406 <__ssputs_r+0x62>
 80023f2:	230c      	movs	r3, #12
 80023f4:	603b      	str	r3, [r7, #0]
 80023f6:	2340      	movs	r3, #64	; 0x40
 80023f8:	2001      	movs	r0, #1
 80023fa:	89a2      	ldrh	r2, [r4, #12]
 80023fc:	4240      	negs	r0, r0
 80023fe:	4313      	orrs	r3, r2
 8002400:	81a3      	strh	r3, [r4, #12]
 8002402:	b005      	add	sp, #20
 8002404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002406:	9a02      	ldr	r2, [sp, #8]
 8002408:	6921      	ldr	r1, [r4, #16]
 800240a:	f000 faba 	bl	8002982 <memcpy>
 800240e:	89a3      	ldrh	r3, [r4, #12]
 8002410:	4a14      	ldr	r2, [pc, #80]	; (8002464 <__ssputs_r+0xc0>)
 8002412:	401a      	ands	r2, r3
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	4313      	orrs	r3, r2
 8002418:	81a3      	strh	r3, [r4, #12]
 800241a:	9b02      	ldr	r3, [sp, #8]
 800241c:	6126      	str	r6, [r4, #16]
 800241e:	18f6      	adds	r6, r6, r3
 8002420:	6026      	str	r6, [r4, #0]
 8002422:	6165      	str	r5, [r4, #20]
 8002424:	9e01      	ldr	r6, [sp, #4]
 8002426:	1aed      	subs	r5, r5, r3
 8002428:	60a5      	str	r5, [r4, #8]
 800242a:	9b01      	ldr	r3, [sp, #4]
 800242c:	429e      	cmp	r6, r3
 800242e:	d900      	bls.n	8002432 <__ssputs_r+0x8e>
 8002430:	9e01      	ldr	r6, [sp, #4]
 8002432:	0032      	movs	r2, r6
 8002434:	9903      	ldr	r1, [sp, #12]
 8002436:	6820      	ldr	r0, [r4, #0]
 8002438:	f000 faac 	bl	8002994 <memmove>
 800243c:	68a3      	ldr	r3, [r4, #8]
 800243e:	2000      	movs	r0, #0
 8002440:	1b9b      	subs	r3, r3, r6
 8002442:	60a3      	str	r3, [r4, #8]
 8002444:	6823      	ldr	r3, [r4, #0]
 8002446:	199e      	adds	r6, r3, r6
 8002448:	6026      	str	r6, [r4, #0]
 800244a:	e7da      	b.n	8002402 <__ssputs_r+0x5e>
 800244c:	002a      	movs	r2, r5
 800244e:	0038      	movs	r0, r7
 8002450:	f000 fb5c 	bl	8002b0c <_realloc_r>
 8002454:	1e06      	subs	r6, r0, #0
 8002456:	d1e0      	bne.n	800241a <__ssputs_r+0x76>
 8002458:	0038      	movs	r0, r7
 800245a:	6921      	ldr	r1, [r4, #16]
 800245c:	f000 faae 	bl	80029bc <_free_r>
 8002460:	e7c7      	b.n	80023f2 <__ssputs_r+0x4e>
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	fffffb7f 	.word	0xfffffb7f

08002468 <_svfiprintf_r>:
 8002468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800246a:	b0a1      	sub	sp, #132	; 0x84
 800246c:	9003      	str	r0, [sp, #12]
 800246e:	001d      	movs	r5, r3
 8002470:	898b      	ldrh	r3, [r1, #12]
 8002472:	000f      	movs	r7, r1
 8002474:	0016      	movs	r6, r2
 8002476:	061b      	lsls	r3, r3, #24
 8002478:	d511      	bpl.n	800249e <_svfiprintf_r+0x36>
 800247a:	690b      	ldr	r3, [r1, #16]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10e      	bne.n	800249e <_svfiprintf_r+0x36>
 8002480:	2140      	movs	r1, #64	; 0x40
 8002482:	f000 fae5 	bl	8002a50 <_malloc_r>
 8002486:	6038      	str	r0, [r7, #0]
 8002488:	6138      	str	r0, [r7, #16]
 800248a:	2800      	cmp	r0, #0
 800248c:	d105      	bne.n	800249a <_svfiprintf_r+0x32>
 800248e:	230c      	movs	r3, #12
 8002490:	9a03      	ldr	r2, [sp, #12]
 8002492:	3801      	subs	r0, #1
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	b021      	add	sp, #132	; 0x84
 8002498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800249a:	2340      	movs	r3, #64	; 0x40
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	2300      	movs	r3, #0
 80024a0:	ac08      	add	r4, sp, #32
 80024a2:	6163      	str	r3, [r4, #20]
 80024a4:	3320      	adds	r3, #32
 80024a6:	7663      	strb	r3, [r4, #25]
 80024a8:	3310      	adds	r3, #16
 80024aa:	76a3      	strb	r3, [r4, #26]
 80024ac:	9507      	str	r5, [sp, #28]
 80024ae:	0035      	movs	r5, r6
 80024b0:	782b      	ldrb	r3, [r5, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <_svfiprintf_r+0x52>
 80024b6:	2b25      	cmp	r3, #37	; 0x25
 80024b8:	d147      	bne.n	800254a <_svfiprintf_r+0xe2>
 80024ba:	1bab      	subs	r3, r5, r6
 80024bc:	9305      	str	r3, [sp, #20]
 80024be:	42b5      	cmp	r5, r6
 80024c0:	d00c      	beq.n	80024dc <_svfiprintf_r+0x74>
 80024c2:	0032      	movs	r2, r6
 80024c4:	0039      	movs	r1, r7
 80024c6:	9803      	ldr	r0, [sp, #12]
 80024c8:	f7ff ff6c 	bl	80023a4 <__ssputs_r>
 80024cc:	1c43      	adds	r3, r0, #1
 80024ce:	d100      	bne.n	80024d2 <_svfiprintf_r+0x6a>
 80024d0:	e0ae      	b.n	8002630 <_svfiprintf_r+0x1c8>
 80024d2:	6962      	ldr	r2, [r4, #20]
 80024d4:	9b05      	ldr	r3, [sp, #20]
 80024d6:	4694      	mov	ip, r2
 80024d8:	4463      	add	r3, ip
 80024da:	6163      	str	r3, [r4, #20]
 80024dc:	782b      	ldrb	r3, [r5, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d100      	bne.n	80024e4 <_svfiprintf_r+0x7c>
 80024e2:	e0a5      	b.n	8002630 <_svfiprintf_r+0x1c8>
 80024e4:	2201      	movs	r2, #1
 80024e6:	2300      	movs	r3, #0
 80024e8:	4252      	negs	r2, r2
 80024ea:	6062      	str	r2, [r4, #4]
 80024ec:	a904      	add	r1, sp, #16
 80024ee:	3254      	adds	r2, #84	; 0x54
 80024f0:	1852      	adds	r2, r2, r1
 80024f2:	1c6e      	adds	r6, r5, #1
 80024f4:	6023      	str	r3, [r4, #0]
 80024f6:	60e3      	str	r3, [r4, #12]
 80024f8:	60a3      	str	r3, [r4, #8]
 80024fa:	7013      	strb	r3, [r2, #0]
 80024fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80024fe:	2205      	movs	r2, #5
 8002500:	7831      	ldrb	r1, [r6, #0]
 8002502:	4854      	ldr	r0, [pc, #336]	; (8002654 <_svfiprintf_r+0x1ec>)
 8002504:	f000 fa32 	bl	800296c <memchr>
 8002508:	1c75      	adds	r5, r6, #1
 800250a:	2800      	cmp	r0, #0
 800250c:	d11f      	bne.n	800254e <_svfiprintf_r+0xe6>
 800250e:	6822      	ldr	r2, [r4, #0]
 8002510:	06d3      	lsls	r3, r2, #27
 8002512:	d504      	bpl.n	800251e <_svfiprintf_r+0xb6>
 8002514:	2353      	movs	r3, #83	; 0x53
 8002516:	a904      	add	r1, sp, #16
 8002518:	185b      	adds	r3, r3, r1
 800251a:	2120      	movs	r1, #32
 800251c:	7019      	strb	r1, [r3, #0]
 800251e:	0713      	lsls	r3, r2, #28
 8002520:	d504      	bpl.n	800252c <_svfiprintf_r+0xc4>
 8002522:	2353      	movs	r3, #83	; 0x53
 8002524:	a904      	add	r1, sp, #16
 8002526:	185b      	adds	r3, r3, r1
 8002528:	212b      	movs	r1, #43	; 0x2b
 800252a:	7019      	strb	r1, [r3, #0]
 800252c:	7833      	ldrb	r3, [r6, #0]
 800252e:	2b2a      	cmp	r3, #42	; 0x2a
 8002530:	d016      	beq.n	8002560 <_svfiprintf_r+0xf8>
 8002532:	0035      	movs	r5, r6
 8002534:	2100      	movs	r1, #0
 8002536:	200a      	movs	r0, #10
 8002538:	68e3      	ldr	r3, [r4, #12]
 800253a:	782a      	ldrb	r2, [r5, #0]
 800253c:	1c6e      	adds	r6, r5, #1
 800253e:	3a30      	subs	r2, #48	; 0x30
 8002540:	2a09      	cmp	r2, #9
 8002542:	d94e      	bls.n	80025e2 <_svfiprintf_r+0x17a>
 8002544:	2900      	cmp	r1, #0
 8002546:	d111      	bne.n	800256c <_svfiprintf_r+0x104>
 8002548:	e017      	b.n	800257a <_svfiprintf_r+0x112>
 800254a:	3501      	adds	r5, #1
 800254c:	e7b0      	b.n	80024b0 <_svfiprintf_r+0x48>
 800254e:	4b41      	ldr	r3, [pc, #260]	; (8002654 <_svfiprintf_r+0x1ec>)
 8002550:	6822      	ldr	r2, [r4, #0]
 8002552:	1ac0      	subs	r0, r0, r3
 8002554:	2301      	movs	r3, #1
 8002556:	4083      	lsls	r3, r0
 8002558:	4313      	orrs	r3, r2
 800255a:	002e      	movs	r6, r5
 800255c:	6023      	str	r3, [r4, #0]
 800255e:	e7ce      	b.n	80024fe <_svfiprintf_r+0x96>
 8002560:	9b07      	ldr	r3, [sp, #28]
 8002562:	1d19      	adds	r1, r3, #4
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	9107      	str	r1, [sp, #28]
 8002568:	2b00      	cmp	r3, #0
 800256a:	db01      	blt.n	8002570 <_svfiprintf_r+0x108>
 800256c:	930b      	str	r3, [sp, #44]	; 0x2c
 800256e:	e004      	b.n	800257a <_svfiprintf_r+0x112>
 8002570:	425b      	negs	r3, r3
 8002572:	60e3      	str	r3, [r4, #12]
 8002574:	2302      	movs	r3, #2
 8002576:	4313      	orrs	r3, r2
 8002578:	6023      	str	r3, [r4, #0]
 800257a:	782b      	ldrb	r3, [r5, #0]
 800257c:	2b2e      	cmp	r3, #46	; 0x2e
 800257e:	d10a      	bne.n	8002596 <_svfiprintf_r+0x12e>
 8002580:	786b      	ldrb	r3, [r5, #1]
 8002582:	2b2a      	cmp	r3, #42	; 0x2a
 8002584:	d135      	bne.n	80025f2 <_svfiprintf_r+0x18a>
 8002586:	9b07      	ldr	r3, [sp, #28]
 8002588:	3502      	adds	r5, #2
 800258a:	1d1a      	adds	r2, r3, #4
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	9207      	str	r2, [sp, #28]
 8002590:	2b00      	cmp	r3, #0
 8002592:	db2b      	blt.n	80025ec <_svfiprintf_r+0x184>
 8002594:	9309      	str	r3, [sp, #36]	; 0x24
 8002596:	4e30      	ldr	r6, [pc, #192]	; (8002658 <_svfiprintf_r+0x1f0>)
 8002598:	2203      	movs	r2, #3
 800259a:	0030      	movs	r0, r6
 800259c:	7829      	ldrb	r1, [r5, #0]
 800259e:	f000 f9e5 	bl	800296c <memchr>
 80025a2:	2800      	cmp	r0, #0
 80025a4:	d006      	beq.n	80025b4 <_svfiprintf_r+0x14c>
 80025a6:	2340      	movs	r3, #64	; 0x40
 80025a8:	1b80      	subs	r0, r0, r6
 80025aa:	4083      	lsls	r3, r0
 80025ac:	6822      	ldr	r2, [r4, #0]
 80025ae:	3501      	adds	r5, #1
 80025b0:	4313      	orrs	r3, r2
 80025b2:	6023      	str	r3, [r4, #0]
 80025b4:	7829      	ldrb	r1, [r5, #0]
 80025b6:	2206      	movs	r2, #6
 80025b8:	4828      	ldr	r0, [pc, #160]	; (800265c <_svfiprintf_r+0x1f4>)
 80025ba:	1c6e      	adds	r6, r5, #1
 80025bc:	7621      	strb	r1, [r4, #24]
 80025be:	f000 f9d5 	bl	800296c <memchr>
 80025c2:	2800      	cmp	r0, #0
 80025c4:	d03c      	beq.n	8002640 <_svfiprintf_r+0x1d8>
 80025c6:	4b26      	ldr	r3, [pc, #152]	; (8002660 <_svfiprintf_r+0x1f8>)
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d125      	bne.n	8002618 <_svfiprintf_r+0x1b0>
 80025cc:	2207      	movs	r2, #7
 80025ce:	9b07      	ldr	r3, [sp, #28]
 80025d0:	3307      	adds	r3, #7
 80025d2:	4393      	bics	r3, r2
 80025d4:	3308      	adds	r3, #8
 80025d6:	9307      	str	r3, [sp, #28]
 80025d8:	6963      	ldr	r3, [r4, #20]
 80025da:	9a04      	ldr	r2, [sp, #16]
 80025dc:	189b      	adds	r3, r3, r2
 80025de:	6163      	str	r3, [r4, #20]
 80025e0:	e765      	b.n	80024ae <_svfiprintf_r+0x46>
 80025e2:	4343      	muls	r3, r0
 80025e4:	0035      	movs	r5, r6
 80025e6:	2101      	movs	r1, #1
 80025e8:	189b      	adds	r3, r3, r2
 80025ea:	e7a6      	b.n	800253a <_svfiprintf_r+0xd2>
 80025ec:	2301      	movs	r3, #1
 80025ee:	425b      	negs	r3, r3
 80025f0:	e7d0      	b.n	8002594 <_svfiprintf_r+0x12c>
 80025f2:	2300      	movs	r3, #0
 80025f4:	200a      	movs	r0, #10
 80025f6:	001a      	movs	r2, r3
 80025f8:	3501      	adds	r5, #1
 80025fa:	6063      	str	r3, [r4, #4]
 80025fc:	7829      	ldrb	r1, [r5, #0]
 80025fe:	1c6e      	adds	r6, r5, #1
 8002600:	3930      	subs	r1, #48	; 0x30
 8002602:	2909      	cmp	r1, #9
 8002604:	d903      	bls.n	800260e <_svfiprintf_r+0x1a6>
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0c5      	beq.n	8002596 <_svfiprintf_r+0x12e>
 800260a:	9209      	str	r2, [sp, #36]	; 0x24
 800260c:	e7c3      	b.n	8002596 <_svfiprintf_r+0x12e>
 800260e:	4342      	muls	r2, r0
 8002610:	0035      	movs	r5, r6
 8002612:	2301      	movs	r3, #1
 8002614:	1852      	adds	r2, r2, r1
 8002616:	e7f1      	b.n	80025fc <_svfiprintf_r+0x194>
 8002618:	ab07      	add	r3, sp, #28
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	003a      	movs	r2, r7
 800261e:	0021      	movs	r1, r4
 8002620:	4b10      	ldr	r3, [pc, #64]	; (8002664 <_svfiprintf_r+0x1fc>)
 8002622:	9803      	ldr	r0, [sp, #12]
 8002624:	e000      	b.n	8002628 <_svfiprintf_r+0x1c0>
 8002626:	bf00      	nop
 8002628:	9004      	str	r0, [sp, #16]
 800262a:	9b04      	ldr	r3, [sp, #16]
 800262c:	3301      	adds	r3, #1
 800262e:	d1d3      	bne.n	80025d8 <_svfiprintf_r+0x170>
 8002630:	89bb      	ldrh	r3, [r7, #12]
 8002632:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002634:	065b      	lsls	r3, r3, #25
 8002636:	d400      	bmi.n	800263a <_svfiprintf_r+0x1d2>
 8002638:	e72d      	b.n	8002496 <_svfiprintf_r+0x2e>
 800263a:	2001      	movs	r0, #1
 800263c:	4240      	negs	r0, r0
 800263e:	e72a      	b.n	8002496 <_svfiprintf_r+0x2e>
 8002640:	ab07      	add	r3, sp, #28
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	003a      	movs	r2, r7
 8002646:	0021      	movs	r1, r4
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <_svfiprintf_r+0x1fc>)
 800264a:	9803      	ldr	r0, [sp, #12]
 800264c:	f000 f87c 	bl	8002748 <_printf_i>
 8002650:	e7ea      	b.n	8002628 <_svfiprintf_r+0x1c0>
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	08002c34 	.word	0x08002c34
 8002658:	08002c3a 	.word	0x08002c3a
 800265c:	08002c3e 	.word	0x08002c3e
 8002660:	00000000 	.word	0x00000000
 8002664:	080023a5 	.word	0x080023a5

08002668 <_printf_common>:
 8002668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800266a:	0015      	movs	r5, r2
 800266c:	9301      	str	r3, [sp, #4]
 800266e:	688a      	ldr	r2, [r1, #8]
 8002670:	690b      	ldr	r3, [r1, #16]
 8002672:	000c      	movs	r4, r1
 8002674:	9000      	str	r0, [sp, #0]
 8002676:	4293      	cmp	r3, r2
 8002678:	da00      	bge.n	800267c <_printf_common+0x14>
 800267a:	0013      	movs	r3, r2
 800267c:	0022      	movs	r2, r4
 800267e:	602b      	str	r3, [r5, #0]
 8002680:	3243      	adds	r2, #67	; 0x43
 8002682:	7812      	ldrb	r2, [r2, #0]
 8002684:	2a00      	cmp	r2, #0
 8002686:	d001      	beq.n	800268c <_printf_common+0x24>
 8002688:	3301      	adds	r3, #1
 800268a:	602b      	str	r3, [r5, #0]
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	069b      	lsls	r3, r3, #26
 8002690:	d502      	bpl.n	8002698 <_printf_common+0x30>
 8002692:	682b      	ldr	r3, [r5, #0]
 8002694:	3302      	adds	r3, #2
 8002696:	602b      	str	r3, [r5, #0]
 8002698:	6822      	ldr	r2, [r4, #0]
 800269a:	2306      	movs	r3, #6
 800269c:	0017      	movs	r7, r2
 800269e:	401f      	ands	r7, r3
 80026a0:	421a      	tst	r2, r3
 80026a2:	d027      	beq.n	80026f4 <_printf_common+0x8c>
 80026a4:	0023      	movs	r3, r4
 80026a6:	3343      	adds	r3, #67	; 0x43
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	1e5a      	subs	r2, r3, #1
 80026ac:	4193      	sbcs	r3, r2
 80026ae:	6822      	ldr	r2, [r4, #0]
 80026b0:	0692      	lsls	r2, r2, #26
 80026b2:	d430      	bmi.n	8002716 <_printf_common+0xae>
 80026b4:	0022      	movs	r2, r4
 80026b6:	9901      	ldr	r1, [sp, #4]
 80026b8:	9800      	ldr	r0, [sp, #0]
 80026ba:	9e08      	ldr	r6, [sp, #32]
 80026bc:	3243      	adds	r2, #67	; 0x43
 80026be:	47b0      	blx	r6
 80026c0:	1c43      	adds	r3, r0, #1
 80026c2:	d025      	beq.n	8002710 <_printf_common+0xa8>
 80026c4:	2306      	movs	r3, #6
 80026c6:	6820      	ldr	r0, [r4, #0]
 80026c8:	682a      	ldr	r2, [r5, #0]
 80026ca:	68e1      	ldr	r1, [r4, #12]
 80026cc:	2500      	movs	r5, #0
 80026ce:	4003      	ands	r3, r0
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	d103      	bne.n	80026dc <_printf_common+0x74>
 80026d4:	1a8d      	subs	r5, r1, r2
 80026d6:	43eb      	mvns	r3, r5
 80026d8:	17db      	asrs	r3, r3, #31
 80026da:	401d      	ands	r5, r3
 80026dc:	68a3      	ldr	r3, [r4, #8]
 80026de:	6922      	ldr	r2, [r4, #16]
 80026e0:	4293      	cmp	r3, r2
 80026e2:	dd01      	ble.n	80026e8 <_printf_common+0x80>
 80026e4:	1a9b      	subs	r3, r3, r2
 80026e6:	18ed      	adds	r5, r5, r3
 80026e8:	2700      	movs	r7, #0
 80026ea:	42bd      	cmp	r5, r7
 80026ec:	d120      	bne.n	8002730 <_printf_common+0xc8>
 80026ee:	2000      	movs	r0, #0
 80026f0:	e010      	b.n	8002714 <_printf_common+0xac>
 80026f2:	3701      	adds	r7, #1
 80026f4:	68e3      	ldr	r3, [r4, #12]
 80026f6:	682a      	ldr	r2, [r5, #0]
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	42bb      	cmp	r3, r7
 80026fc:	ddd2      	ble.n	80026a4 <_printf_common+0x3c>
 80026fe:	0022      	movs	r2, r4
 8002700:	2301      	movs	r3, #1
 8002702:	9901      	ldr	r1, [sp, #4]
 8002704:	9800      	ldr	r0, [sp, #0]
 8002706:	9e08      	ldr	r6, [sp, #32]
 8002708:	3219      	adds	r2, #25
 800270a:	47b0      	blx	r6
 800270c:	1c43      	adds	r3, r0, #1
 800270e:	d1f0      	bne.n	80026f2 <_printf_common+0x8a>
 8002710:	2001      	movs	r0, #1
 8002712:	4240      	negs	r0, r0
 8002714:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002716:	2030      	movs	r0, #48	; 0x30
 8002718:	18e1      	adds	r1, r4, r3
 800271a:	3143      	adds	r1, #67	; 0x43
 800271c:	7008      	strb	r0, [r1, #0]
 800271e:	0021      	movs	r1, r4
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	3145      	adds	r1, #69	; 0x45
 8002724:	7809      	ldrb	r1, [r1, #0]
 8002726:	18a2      	adds	r2, r4, r2
 8002728:	3243      	adds	r2, #67	; 0x43
 800272a:	3302      	adds	r3, #2
 800272c:	7011      	strb	r1, [r2, #0]
 800272e:	e7c1      	b.n	80026b4 <_printf_common+0x4c>
 8002730:	0022      	movs	r2, r4
 8002732:	2301      	movs	r3, #1
 8002734:	9901      	ldr	r1, [sp, #4]
 8002736:	9800      	ldr	r0, [sp, #0]
 8002738:	9e08      	ldr	r6, [sp, #32]
 800273a:	321a      	adds	r2, #26
 800273c:	47b0      	blx	r6
 800273e:	1c43      	adds	r3, r0, #1
 8002740:	d0e6      	beq.n	8002710 <_printf_common+0xa8>
 8002742:	3701      	adds	r7, #1
 8002744:	e7d1      	b.n	80026ea <_printf_common+0x82>
	...

08002748 <_printf_i>:
 8002748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800274a:	b08b      	sub	sp, #44	; 0x2c
 800274c:	9206      	str	r2, [sp, #24]
 800274e:	000a      	movs	r2, r1
 8002750:	3243      	adds	r2, #67	; 0x43
 8002752:	9307      	str	r3, [sp, #28]
 8002754:	9005      	str	r0, [sp, #20]
 8002756:	9204      	str	r2, [sp, #16]
 8002758:	7e0a      	ldrb	r2, [r1, #24]
 800275a:	000c      	movs	r4, r1
 800275c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800275e:	2a78      	cmp	r2, #120	; 0x78
 8002760:	d806      	bhi.n	8002770 <_printf_i+0x28>
 8002762:	2a62      	cmp	r2, #98	; 0x62
 8002764:	d808      	bhi.n	8002778 <_printf_i+0x30>
 8002766:	2a00      	cmp	r2, #0
 8002768:	d100      	bne.n	800276c <_printf_i+0x24>
 800276a:	e0c0      	b.n	80028ee <_printf_i+0x1a6>
 800276c:	2a58      	cmp	r2, #88	; 0x58
 800276e:	d052      	beq.n	8002816 <_printf_i+0xce>
 8002770:	0026      	movs	r6, r4
 8002772:	3642      	adds	r6, #66	; 0x42
 8002774:	7032      	strb	r2, [r6, #0]
 8002776:	e022      	b.n	80027be <_printf_i+0x76>
 8002778:	0010      	movs	r0, r2
 800277a:	3863      	subs	r0, #99	; 0x63
 800277c:	2815      	cmp	r0, #21
 800277e:	d8f7      	bhi.n	8002770 <_printf_i+0x28>
 8002780:	f7fd fcc2 	bl	8000108 <__gnu_thumb1_case_shi>
 8002784:	001f0016 	.word	0x001f0016
 8002788:	fff6fff6 	.word	0xfff6fff6
 800278c:	fff6fff6 	.word	0xfff6fff6
 8002790:	fff6001f 	.word	0xfff6001f
 8002794:	fff6fff6 	.word	0xfff6fff6
 8002798:	00a8fff6 	.word	0x00a8fff6
 800279c:	009a0036 	.word	0x009a0036
 80027a0:	fff6fff6 	.word	0xfff6fff6
 80027a4:	fff600b9 	.word	0xfff600b9
 80027a8:	fff60036 	.word	0xfff60036
 80027ac:	009efff6 	.word	0x009efff6
 80027b0:	0026      	movs	r6, r4
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	3642      	adds	r6, #66	; 0x42
 80027b6:	1d11      	adds	r1, r2, #4
 80027b8:	6019      	str	r1, [r3, #0]
 80027ba:	6813      	ldr	r3, [r2, #0]
 80027bc:	7033      	strb	r3, [r6, #0]
 80027be:	2301      	movs	r3, #1
 80027c0:	e0a7      	b.n	8002912 <_printf_i+0x1ca>
 80027c2:	6808      	ldr	r0, [r1, #0]
 80027c4:	6819      	ldr	r1, [r3, #0]
 80027c6:	1d0a      	adds	r2, r1, #4
 80027c8:	0605      	lsls	r5, r0, #24
 80027ca:	d50b      	bpl.n	80027e4 <_printf_i+0x9c>
 80027cc:	680d      	ldr	r5, [r1, #0]
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	2d00      	cmp	r5, #0
 80027d2:	da03      	bge.n	80027dc <_printf_i+0x94>
 80027d4:	232d      	movs	r3, #45	; 0x2d
 80027d6:	9a04      	ldr	r2, [sp, #16]
 80027d8:	426d      	negs	r5, r5
 80027da:	7013      	strb	r3, [r2, #0]
 80027dc:	4b61      	ldr	r3, [pc, #388]	; (8002964 <_printf_i+0x21c>)
 80027de:	270a      	movs	r7, #10
 80027e0:	9303      	str	r3, [sp, #12]
 80027e2:	e032      	b.n	800284a <_printf_i+0x102>
 80027e4:	680d      	ldr	r5, [r1, #0]
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	0641      	lsls	r1, r0, #25
 80027ea:	d5f1      	bpl.n	80027d0 <_printf_i+0x88>
 80027ec:	b22d      	sxth	r5, r5
 80027ee:	e7ef      	b.n	80027d0 <_printf_i+0x88>
 80027f0:	680d      	ldr	r5, [r1, #0]
 80027f2:	6819      	ldr	r1, [r3, #0]
 80027f4:	1d08      	adds	r0, r1, #4
 80027f6:	6018      	str	r0, [r3, #0]
 80027f8:	062e      	lsls	r6, r5, #24
 80027fa:	d501      	bpl.n	8002800 <_printf_i+0xb8>
 80027fc:	680d      	ldr	r5, [r1, #0]
 80027fe:	e003      	b.n	8002808 <_printf_i+0xc0>
 8002800:	066d      	lsls	r5, r5, #25
 8002802:	d5fb      	bpl.n	80027fc <_printf_i+0xb4>
 8002804:	680d      	ldr	r5, [r1, #0]
 8002806:	b2ad      	uxth	r5, r5
 8002808:	4b56      	ldr	r3, [pc, #344]	; (8002964 <_printf_i+0x21c>)
 800280a:	270a      	movs	r7, #10
 800280c:	9303      	str	r3, [sp, #12]
 800280e:	2a6f      	cmp	r2, #111	; 0x6f
 8002810:	d117      	bne.n	8002842 <_printf_i+0xfa>
 8002812:	2708      	movs	r7, #8
 8002814:	e015      	b.n	8002842 <_printf_i+0xfa>
 8002816:	3145      	adds	r1, #69	; 0x45
 8002818:	700a      	strb	r2, [r1, #0]
 800281a:	4a52      	ldr	r2, [pc, #328]	; (8002964 <_printf_i+0x21c>)
 800281c:	9203      	str	r2, [sp, #12]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	6821      	ldr	r1, [r4, #0]
 8002822:	ca20      	ldmia	r2!, {r5}
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	0608      	lsls	r0, r1, #24
 8002828:	d550      	bpl.n	80028cc <_printf_i+0x184>
 800282a:	07cb      	lsls	r3, r1, #31
 800282c:	d502      	bpl.n	8002834 <_printf_i+0xec>
 800282e:	2320      	movs	r3, #32
 8002830:	4319      	orrs	r1, r3
 8002832:	6021      	str	r1, [r4, #0]
 8002834:	2710      	movs	r7, #16
 8002836:	2d00      	cmp	r5, #0
 8002838:	d103      	bne.n	8002842 <_printf_i+0xfa>
 800283a:	2320      	movs	r3, #32
 800283c:	6822      	ldr	r2, [r4, #0]
 800283e:	439a      	bics	r2, r3
 8002840:	6022      	str	r2, [r4, #0]
 8002842:	0023      	movs	r3, r4
 8002844:	2200      	movs	r2, #0
 8002846:	3343      	adds	r3, #67	; 0x43
 8002848:	701a      	strb	r2, [r3, #0]
 800284a:	6863      	ldr	r3, [r4, #4]
 800284c:	60a3      	str	r3, [r4, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	db03      	blt.n	800285a <_printf_i+0x112>
 8002852:	2204      	movs	r2, #4
 8002854:	6821      	ldr	r1, [r4, #0]
 8002856:	4391      	bics	r1, r2
 8002858:	6021      	str	r1, [r4, #0]
 800285a:	2d00      	cmp	r5, #0
 800285c:	d102      	bne.n	8002864 <_printf_i+0x11c>
 800285e:	9e04      	ldr	r6, [sp, #16]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00c      	beq.n	800287e <_printf_i+0x136>
 8002864:	9e04      	ldr	r6, [sp, #16]
 8002866:	0028      	movs	r0, r5
 8002868:	0039      	movs	r1, r7
 800286a:	f7fd fcdd 	bl	8000228 <__aeabi_uidivmod>
 800286e:	9b03      	ldr	r3, [sp, #12]
 8002870:	3e01      	subs	r6, #1
 8002872:	5c5b      	ldrb	r3, [r3, r1]
 8002874:	7033      	strb	r3, [r6, #0]
 8002876:	002b      	movs	r3, r5
 8002878:	0005      	movs	r5, r0
 800287a:	429f      	cmp	r7, r3
 800287c:	d9f3      	bls.n	8002866 <_printf_i+0x11e>
 800287e:	2f08      	cmp	r7, #8
 8002880:	d109      	bne.n	8002896 <_printf_i+0x14e>
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	07db      	lsls	r3, r3, #31
 8002886:	d506      	bpl.n	8002896 <_printf_i+0x14e>
 8002888:	6863      	ldr	r3, [r4, #4]
 800288a:	6922      	ldr	r2, [r4, #16]
 800288c:	4293      	cmp	r3, r2
 800288e:	dc02      	bgt.n	8002896 <_printf_i+0x14e>
 8002890:	2330      	movs	r3, #48	; 0x30
 8002892:	3e01      	subs	r6, #1
 8002894:	7033      	strb	r3, [r6, #0]
 8002896:	9b04      	ldr	r3, [sp, #16]
 8002898:	1b9b      	subs	r3, r3, r6
 800289a:	6123      	str	r3, [r4, #16]
 800289c:	9b07      	ldr	r3, [sp, #28]
 800289e:	0021      	movs	r1, r4
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	9805      	ldr	r0, [sp, #20]
 80028a4:	9b06      	ldr	r3, [sp, #24]
 80028a6:	aa09      	add	r2, sp, #36	; 0x24
 80028a8:	f7ff fede 	bl	8002668 <_printf_common>
 80028ac:	1c43      	adds	r3, r0, #1
 80028ae:	d135      	bne.n	800291c <_printf_i+0x1d4>
 80028b0:	2001      	movs	r0, #1
 80028b2:	4240      	negs	r0, r0
 80028b4:	b00b      	add	sp, #44	; 0x2c
 80028b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028b8:	2220      	movs	r2, #32
 80028ba:	6809      	ldr	r1, [r1, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	6022      	str	r2, [r4, #0]
 80028c0:	0022      	movs	r2, r4
 80028c2:	2178      	movs	r1, #120	; 0x78
 80028c4:	3245      	adds	r2, #69	; 0x45
 80028c6:	7011      	strb	r1, [r2, #0]
 80028c8:	4a27      	ldr	r2, [pc, #156]	; (8002968 <_printf_i+0x220>)
 80028ca:	e7a7      	b.n	800281c <_printf_i+0xd4>
 80028cc:	0648      	lsls	r0, r1, #25
 80028ce:	d5ac      	bpl.n	800282a <_printf_i+0xe2>
 80028d0:	b2ad      	uxth	r5, r5
 80028d2:	e7aa      	b.n	800282a <_printf_i+0xe2>
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	680d      	ldr	r5, [r1, #0]
 80028d8:	1d10      	adds	r0, r2, #4
 80028da:	6949      	ldr	r1, [r1, #20]
 80028dc:	6018      	str	r0, [r3, #0]
 80028de:	6813      	ldr	r3, [r2, #0]
 80028e0:	062e      	lsls	r6, r5, #24
 80028e2:	d501      	bpl.n	80028e8 <_printf_i+0x1a0>
 80028e4:	6019      	str	r1, [r3, #0]
 80028e6:	e002      	b.n	80028ee <_printf_i+0x1a6>
 80028e8:	066d      	lsls	r5, r5, #25
 80028ea:	d5fb      	bpl.n	80028e4 <_printf_i+0x19c>
 80028ec:	8019      	strh	r1, [r3, #0]
 80028ee:	2300      	movs	r3, #0
 80028f0:	9e04      	ldr	r6, [sp, #16]
 80028f2:	6123      	str	r3, [r4, #16]
 80028f4:	e7d2      	b.n	800289c <_printf_i+0x154>
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	1d11      	adds	r1, r2, #4
 80028fa:	6019      	str	r1, [r3, #0]
 80028fc:	6816      	ldr	r6, [r2, #0]
 80028fe:	2100      	movs	r1, #0
 8002900:	0030      	movs	r0, r6
 8002902:	6862      	ldr	r2, [r4, #4]
 8002904:	f000 f832 	bl	800296c <memchr>
 8002908:	2800      	cmp	r0, #0
 800290a:	d001      	beq.n	8002910 <_printf_i+0x1c8>
 800290c:	1b80      	subs	r0, r0, r6
 800290e:	6060      	str	r0, [r4, #4]
 8002910:	6863      	ldr	r3, [r4, #4]
 8002912:	6123      	str	r3, [r4, #16]
 8002914:	2300      	movs	r3, #0
 8002916:	9a04      	ldr	r2, [sp, #16]
 8002918:	7013      	strb	r3, [r2, #0]
 800291a:	e7bf      	b.n	800289c <_printf_i+0x154>
 800291c:	6923      	ldr	r3, [r4, #16]
 800291e:	0032      	movs	r2, r6
 8002920:	9906      	ldr	r1, [sp, #24]
 8002922:	9805      	ldr	r0, [sp, #20]
 8002924:	9d07      	ldr	r5, [sp, #28]
 8002926:	47a8      	blx	r5
 8002928:	1c43      	adds	r3, r0, #1
 800292a:	d0c1      	beq.n	80028b0 <_printf_i+0x168>
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	079b      	lsls	r3, r3, #30
 8002930:	d415      	bmi.n	800295e <_printf_i+0x216>
 8002932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002934:	68e0      	ldr	r0, [r4, #12]
 8002936:	4298      	cmp	r0, r3
 8002938:	dabc      	bge.n	80028b4 <_printf_i+0x16c>
 800293a:	0018      	movs	r0, r3
 800293c:	e7ba      	b.n	80028b4 <_printf_i+0x16c>
 800293e:	0022      	movs	r2, r4
 8002940:	2301      	movs	r3, #1
 8002942:	9906      	ldr	r1, [sp, #24]
 8002944:	9805      	ldr	r0, [sp, #20]
 8002946:	9e07      	ldr	r6, [sp, #28]
 8002948:	3219      	adds	r2, #25
 800294a:	47b0      	blx	r6
 800294c:	1c43      	adds	r3, r0, #1
 800294e:	d0af      	beq.n	80028b0 <_printf_i+0x168>
 8002950:	3501      	adds	r5, #1
 8002952:	68e3      	ldr	r3, [r4, #12]
 8002954:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	42ab      	cmp	r3, r5
 800295a:	dcf0      	bgt.n	800293e <_printf_i+0x1f6>
 800295c:	e7e9      	b.n	8002932 <_printf_i+0x1ea>
 800295e:	2500      	movs	r5, #0
 8002960:	e7f7      	b.n	8002952 <_printf_i+0x20a>
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	08002c45 	.word	0x08002c45
 8002968:	08002c56 	.word	0x08002c56

0800296c <memchr>:
 800296c:	b2c9      	uxtb	r1, r1
 800296e:	1882      	adds	r2, r0, r2
 8002970:	4290      	cmp	r0, r2
 8002972:	d101      	bne.n	8002978 <memchr+0xc>
 8002974:	2000      	movs	r0, #0
 8002976:	4770      	bx	lr
 8002978:	7803      	ldrb	r3, [r0, #0]
 800297a:	428b      	cmp	r3, r1
 800297c:	d0fb      	beq.n	8002976 <memchr+0xa>
 800297e:	3001      	adds	r0, #1
 8002980:	e7f6      	b.n	8002970 <memchr+0x4>

08002982 <memcpy>:
 8002982:	2300      	movs	r3, #0
 8002984:	b510      	push	{r4, lr}
 8002986:	429a      	cmp	r2, r3
 8002988:	d100      	bne.n	800298c <memcpy+0xa>
 800298a:	bd10      	pop	{r4, pc}
 800298c:	5ccc      	ldrb	r4, [r1, r3]
 800298e:	54c4      	strb	r4, [r0, r3]
 8002990:	3301      	adds	r3, #1
 8002992:	e7f8      	b.n	8002986 <memcpy+0x4>

08002994 <memmove>:
 8002994:	b510      	push	{r4, lr}
 8002996:	4288      	cmp	r0, r1
 8002998:	d902      	bls.n	80029a0 <memmove+0xc>
 800299a:	188b      	adds	r3, r1, r2
 800299c:	4298      	cmp	r0, r3
 800299e:	d303      	bcc.n	80029a8 <memmove+0x14>
 80029a0:	2300      	movs	r3, #0
 80029a2:	e007      	b.n	80029b4 <memmove+0x20>
 80029a4:	5c8b      	ldrb	r3, [r1, r2]
 80029a6:	5483      	strb	r3, [r0, r2]
 80029a8:	3a01      	subs	r2, #1
 80029aa:	d2fb      	bcs.n	80029a4 <memmove+0x10>
 80029ac:	bd10      	pop	{r4, pc}
 80029ae:	5ccc      	ldrb	r4, [r1, r3]
 80029b0:	54c4      	strb	r4, [r0, r3]
 80029b2:	3301      	adds	r3, #1
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d1fa      	bne.n	80029ae <memmove+0x1a>
 80029b8:	e7f8      	b.n	80029ac <memmove+0x18>
	...

080029bc <_free_r>:
 80029bc:	b570      	push	{r4, r5, r6, lr}
 80029be:	0005      	movs	r5, r0
 80029c0:	2900      	cmp	r1, #0
 80029c2:	d010      	beq.n	80029e6 <_free_r+0x2a>
 80029c4:	1f0c      	subs	r4, r1, #4
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	da00      	bge.n	80029ce <_free_r+0x12>
 80029cc:	18e4      	adds	r4, r4, r3
 80029ce:	0028      	movs	r0, r5
 80029d0:	f000 f8d4 	bl	8002b7c <__malloc_lock>
 80029d4:	4a1d      	ldr	r2, [pc, #116]	; (8002a4c <_free_r+0x90>)
 80029d6:	6813      	ldr	r3, [r2, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <_free_r+0x2c>
 80029dc:	6063      	str	r3, [r4, #4]
 80029de:	6014      	str	r4, [r2, #0]
 80029e0:	0028      	movs	r0, r5
 80029e2:	f000 f8d3 	bl	8002b8c <__malloc_unlock>
 80029e6:	bd70      	pop	{r4, r5, r6, pc}
 80029e8:	42a3      	cmp	r3, r4
 80029ea:	d908      	bls.n	80029fe <_free_r+0x42>
 80029ec:	6821      	ldr	r1, [r4, #0]
 80029ee:	1860      	adds	r0, r4, r1
 80029f0:	4283      	cmp	r3, r0
 80029f2:	d1f3      	bne.n	80029dc <_free_r+0x20>
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	1841      	adds	r1, r0, r1
 80029fa:	6021      	str	r1, [r4, #0]
 80029fc:	e7ee      	b.n	80029dc <_free_r+0x20>
 80029fe:	001a      	movs	r2, r3
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <_free_r+0x4e>
 8002a06:	42a3      	cmp	r3, r4
 8002a08:	d9f9      	bls.n	80029fe <_free_r+0x42>
 8002a0a:	6811      	ldr	r1, [r2, #0]
 8002a0c:	1850      	adds	r0, r2, r1
 8002a0e:	42a0      	cmp	r0, r4
 8002a10:	d10b      	bne.n	8002a2a <_free_r+0x6e>
 8002a12:	6820      	ldr	r0, [r4, #0]
 8002a14:	1809      	adds	r1, r1, r0
 8002a16:	1850      	adds	r0, r2, r1
 8002a18:	6011      	str	r1, [r2, #0]
 8002a1a:	4283      	cmp	r3, r0
 8002a1c:	d1e0      	bne.n	80029e0 <_free_r+0x24>
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	1841      	adds	r1, r0, r1
 8002a24:	6011      	str	r1, [r2, #0]
 8002a26:	6053      	str	r3, [r2, #4]
 8002a28:	e7da      	b.n	80029e0 <_free_r+0x24>
 8002a2a:	42a0      	cmp	r0, r4
 8002a2c:	d902      	bls.n	8002a34 <_free_r+0x78>
 8002a2e:	230c      	movs	r3, #12
 8002a30:	602b      	str	r3, [r5, #0]
 8002a32:	e7d5      	b.n	80029e0 <_free_r+0x24>
 8002a34:	6821      	ldr	r1, [r4, #0]
 8002a36:	1860      	adds	r0, r4, r1
 8002a38:	4283      	cmp	r3, r0
 8002a3a:	d103      	bne.n	8002a44 <_free_r+0x88>
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	1841      	adds	r1, r0, r1
 8002a42:	6021      	str	r1, [r4, #0]
 8002a44:	6063      	str	r3, [r4, #4]
 8002a46:	6054      	str	r4, [r2, #4]
 8002a48:	e7ca      	b.n	80029e0 <_free_r+0x24>
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	20000090 	.word	0x20000090

08002a50 <_malloc_r>:
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	2303      	movs	r3, #3
 8002a54:	1ccd      	adds	r5, r1, #3
 8002a56:	439d      	bics	r5, r3
 8002a58:	3508      	adds	r5, #8
 8002a5a:	0006      	movs	r6, r0
 8002a5c:	2d0c      	cmp	r5, #12
 8002a5e:	d21f      	bcs.n	8002aa0 <_malloc_r+0x50>
 8002a60:	250c      	movs	r5, #12
 8002a62:	42a9      	cmp	r1, r5
 8002a64:	d81e      	bhi.n	8002aa4 <_malloc_r+0x54>
 8002a66:	0030      	movs	r0, r6
 8002a68:	f000 f888 	bl	8002b7c <__malloc_lock>
 8002a6c:	4925      	ldr	r1, [pc, #148]	; (8002b04 <_malloc_r+0xb4>)
 8002a6e:	680a      	ldr	r2, [r1, #0]
 8002a70:	0014      	movs	r4, r2
 8002a72:	2c00      	cmp	r4, #0
 8002a74:	d11a      	bne.n	8002aac <_malloc_r+0x5c>
 8002a76:	4f24      	ldr	r7, [pc, #144]	; (8002b08 <_malloc_r+0xb8>)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d104      	bne.n	8002a88 <_malloc_r+0x38>
 8002a7e:	0021      	movs	r1, r4
 8002a80:	0030      	movs	r0, r6
 8002a82:	f000 f869 	bl	8002b58 <_sbrk_r>
 8002a86:	6038      	str	r0, [r7, #0]
 8002a88:	0029      	movs	r1, r5
 8002a8a:	0030      	movs	r0, r6
 8002a8c:	f000 f864 	bl	8002b58 <_sbrk_r>
 8002a90:	1c43      	adds	r3, r0, #1
 8002a92:	d12b      	bne.n	8002aec <_malloc_r+0x9c>
 8002a94:	230c      	movs	r3, #12
 8002a96:	0030      	movs	r0, r6
 8002a98:	6033      	str	r3, [r6, #0]
 8002a9a:	f000 f877 	bl	8002b8c <__malloc_unlock>
 8002a9e:	e003      	b.n	8002aa8 <_malloc_r+0x58>
 8002aa0:	2d00      	cmp	r5, #0
 8002aa2:	dade      	bge.n	8002a62 <_malloc_r+0x12>
 8002aa4:	230c      	movs	r3, #12
 8002aa6:	6033      	str	r3, [r6, #0]
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002aac:	6823      	ldr	r3, [r4, #0]
 8002aae:	1b5b      	subs	r3, r3, r5
 8002ab0:	d419      	bmi.n	8002ae6 <_malloc_r+0x96>
 8002ab2:	2b0b      	cmp	r3, #11
 8002ab4:	d903      	bls.n	8002abe <_malloc_r+0x6e>
 8002ab6:	6023      	str	r3, [r4, #0]
 8002ab8:	18e4      	adds	r4, r4, r3
 8002aba:	6025      	str	r5, [r4, #0]
 8002abc:	e003      	b.n	8002ac6 <_malloc_r+0x76>
 8002abe:	6863      	ldr	r3, [r4, #4]
 8002ac0:	42a2      	cmp	r2, r4
 8002ac2:	d10e      	bne.n	8002ae2 <_malloc_r+0x92>
 8002ac4:	600b      	str	r3, [r1, #0]
 8002ac6:	0030      	movs	r0, r6
 8002ac8:	f000 f860 	bl	8002b8c <__malloc_unlock>
 8002acc:	0020      	movs	r0, r4
 8002ace:	2207      	movs	r2, #7
 8002ad0:	300b      	adds	r0, #11
 8002ad2:	1d23      	adds	r3, r4, #4
 8002ad4:	4390      	bics	r0, r2
 8002ad6:	1ac2      	subs	r2, r0, r3
 8002ad8:	4298      	cmp	r0, r3
 8002ada:	d0e6      	beq.n	8002aaa <_malloc_r+0x5a>
 8002adc:	1a1b      	subs	r3, r3, r0
 8002ade:	50a3      	str	r3, [r4, r2]
 8002ae0:	e7e3      	b.n	8002aaa <_malloc_r+0x5a>
 8002ae2:	6053      	str	r3, [r2, #4]
 8002ae4:	e7ef      	b.n	8002ac6 <_malloc_r+0x76>
 8002ae6:	0022      	movs	r2, r4
 8002ae8:	6864      	ldr	r4, [r4, #4]
 8002aea:	e7c2      	b.n	8002a72 <_malloc_r+0x22>
 8002aec:	2303      	movs	r3, #3
 8002aee:	1cc4      	adds	r4, r0, #3
 8002af0:	439c      	bics	r4, r3
 8002af2:	42a0      	cmp	r0, r4
 8002af4:	d0e1      	beq.n	8002aba <_malloc_r+0x6a>
 8002af6:	1a21      	subs	r1, r4, r0
 8002af8:	0030      	movs	r0, r6
 8002afa:	f000 f82d 	bl	8002b58 <_sbrk_r>
 8002afe:	1c43      	adds	r3, r0, #1
 8002b00:	d1db      	bne.n	8002aba <_malloc_r+0x6a>
 8002b02:	e7c7      	b.n	8002a94 <_malloc_r+0x44>
 8002b04:	20000090 	.word	0x20000090
 8002b08:	20000094 	.word	0x20000094

08002b0c <_realloc_r>:
 8002b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0e:	0007      	movs	r7, r0
 8002b10:	000d      	movs	r5, r1
 8002b12:	0016      	movs	r6, r2
 8002b14:	2900      	cmp	r1, #0
 8002b16:	d105      	bne.n	8002b24 <_realloc_r+0x18>
 8002b18:	0011      	movs	r1, r2
 8002b1a:	f7ff ff99 	bl	8002a50 <_malloc_r>
 8002b1e:	0004      	movs	r4, r0
 8002b20:	0020      	movs	r0, r4
 8002b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b24:	2a00      	cmp	r2, #0
 8002b26:	d103      	bne.n	8002b30 <_realloc_r+0x24>
 8002b28:	f7ff ff48 	bl	80029bc <_free_r>
 8002b2c:	0034      	movs	r4, r6
 8002b2e:	e7f7      	b.n	8002b20 <_realloc_r+0x14>
 8002b30:	f000 f834 	bl	8002b9c <_malloc_usable_size_r>
 8002b34:	002c      	movs	r4, r5
 8002b36:	42b0      	cmp	r0, r6
 8002b38:	d2f2      	bcs.n	8002b20 <_realloc_r+0x14>
 8002b3a:	0031      	movs	r1, r6
 8002b3c:	0038      	movs	r0, r7
 8002b3e:	f7ff ff87 	bl	8002a50 <_malloc_r>
 8002b42:	1e04      	subs	r4, r0, #0
 8002b44:	d0ec      	beq.n	8002b20 <_realloc_r+0x14>
 8002b46:	0029      	movs	r1, r5
 8002b48:	0032      	movs	r2, r6
 8002b4a:	f7ff ff1a 	bl	8002982 <memcpy>
 8002b4e:	0029      	movs	r1, r5
 8002b50:	0038      	movs	r0, r7
 8002b52:	f7ff ff33 	bl	80029bc <_free_r>
 8002b56:	e7e3      	b.n	8002b20 <_realloc_r+0x14>

08002b58 <_sbrk_r>:
 8002b58:	2300      	movs	r3, #0
 8002b5a:	b570      	push	{r4, r5, r6, lr}
 8002b5c:	4d06      	ldr	r5, [pc, #24]	; (8002b78 <_sbrk_r+0x20>)
 8002b5e:	0004      	movs	r4, r0
 8002b60:	0008      	movs	r0, r1
 8002b62:	602b      	str	r3, [r5, #0]
 8002b64:	f7fd feee 	bl	8000944 <_sbrk>
 8002b68:	1c43      	adds	r3, r0, #1
 8002b6a:	d103      	bne.n	8002b74 <_sbrk_r+0x1c>
 8002b6c:	682b      	ldr	r3, [r5, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d000      	beq.n	8002b74 <_sbrk_r+0x1c>
 8002b72:	6023      	str	r3, [r4, #0]
 8002b74:	bd70      	pop	{r4, r5, r6, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	200001ec 	.word	0x200001ec

08002b7c <__malloc_lock>:
 8002b7c:	b510      	push	{r4, lr}
 8002b7e:	4802      	ldr	r0, [pc, #8]	; (8002b88 <__malloc_lock+0xc>)
 8002b80:	f000 f814 	bl	8002bac <__retarget_lock_acquire_recursive>
 8002b84:	bd10      	pop	{r4, pc}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	200001f4 	.word	0x200001f4

08002b8c <__malloc_unlock>:
 8002b8c:	b510      	push	{r4, lr}
 8002b8e:	4802      	ldr	r0, [pc, #8]	; (8002b98 <__malloc_unlock+0xc>)
 8002b90:	f000 f80d 	bl	8002bae <__retarget_lock_release_recursive>
 8002b94:	bd10      	pop	{r4, pc}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	200001f4 	.word	0x200001f4

08002b9c <_malloc_usable_size_r>:
 8002b9c:	1f0b      	subs	r3, r1, #4
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	1f18      	subs	r0, r3, #4
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	da01      	bge.n	8002baa <_malloc_usable_size_r+0xe>
 8002ba6:	580b      	ldr	r3, [r1, r0]
 8002ba8:	18c0      	adds	r0, r0, r3
 8002baa:	4770      	bx	lr

08002bac <__retarget_lock_acquire_recursive>:
 8002bac:	4770      	bx	lr

08002bae <__retarget_lock_release_recursive>:
 8002bae:	4770      	bx	lr

08002bb0 <_init>:
 8002bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb6:	bc08      	pop	{r3}
 8002bb8:	469e      	mov	lr, r3
 8002bba:	4770      	bx	lr

08002bbc <_fini>:
 8002bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc2:	bc08      	pop	{r3}
 8002bc4:	469e      	mov	lr, r3
 8002bc6:	4770      	bx	lr
